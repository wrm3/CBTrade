---
description: 
globs: 
alwaysApply: true
---
# System Architecture Visualization Rule

Whenever you use this rule, start your message with the following:

"Visualizing system architecture..."

This rule generates comprehensive system architecture diagrams showing subsystem relationships, component boundaries, and integration patterns for the fstrent_tasks_v2 system and target projects.

## Purpose

Provide clear architectural visualization of system components, their relationships, data flows, and integration points to facilitate system understanding, planning, and maintenance decisions.

## Architecture Diagram Types

### Core System Architecture
- **Subsystem Map**: Component boundaries and responsibilities
- **Data Flow**: Information movement between components
- **Integration Matrix**: External system connections and dependencies
- **Deployment View**: Runtime environment and infrastructure layout

### Component Relationships
- **Dependency Graph**: Component dependency chains and cycles
- **Interface Map**: API and integration touch points
- **Service Boundaries**: Microservice or module isolation patterns
- **Technology Stack**: Platform and framework relationships

## Automatic Architecture Discovery

### Subsystem Analysis
```mermaid
graph TB
    subgraph "fstrent_tasks_v2 Core"
        A[Task Management]
        B[Rule System]
        C[Memory Archive]
        D[Template Engine]
    end
    subgraph "Integration Layer"
        E[MCP Server]
        F[File System]
        G[Tool Handlers]
    end
    subgraph "External Systems"
        H[Target Projects]
        I[IDE Integration]
        J[Version Control]
    end
    
    A --> E
    B --> F
    C --> G
    D --> H
    E --> I
    F --> J
```

### Data Flow Visualization
```mermaid
flowchart LR
    A[User Request] --> B[Rule Activation]
    B --> C[Task Processing]
    C --> D[System State]
    D --> E[Memory Storage]
    E --> F[Knowledge Retrieval]
    F --> A
```

## Generation Workflows

### Step 1: System Scanning
- Analyze project structure and component dependencies
- Identify subsystem boundaries from SUBSYSTEMS.md or code structure
- Map external integration points and tool connections

### Step 2: Relationship Mapping
- Extract component interactions from configuration and code
- Identify data flow patterns and system boundaries
- Document integration patterns and external dependencies

### Step 3: Diagram Creation
- Generate appropriate Mermaid diagrams for different architectural views
- Optimize layout for clarity and comprehension
- Include legends and annotations for complex relationships

## Standard Architecture Templates

### MCP System Architecture
```mermaid
C4Context
    title System Architecture Overview
    
    Person(user, "Developer", "Uses fstrent_tasks_v2 system")
    
    System_Boundary(core, "fstrent_tasks_v2 Core") {
        Container(tasks, "Task System", "File-based task management")
        Container(rules, "Rule Engine", "Workflow automation")
        Container(memory, "Memory System", "Knowledge archive")
    }
    
    System_Ext(mcp, "MCP Tools", "External automation tools")
    System_Ext(ide, "IDE/Editor", "Development environment")
    
    Rel(user, core, "Manages tasks and workflows")
    Rel(core, mcp, "Leverages automation tools")
    Rel(core, ide, "Integrates with development environment")
```

### Rule System Interaction
```mermaid
graph TD
    A[Trigger Event] --> B{Rule Registry}
    B --> C[Memory Rule]
    B --> D[Expand Rule]
    B --> E[Tool Awareness]
    B --> F[Context Mgmt]
    
    C --> G[Task Creation]
    D --> G
    E --> G
    F --> G
    
    G --> H[Task Execution]
    H --> I[System State Update]
```

## Quality Guidelines

### Architectural Accuracy
- **Component Boundaries**: Clearly delineate system boundaries and responsibilities
- **Relationship Accuracy**: Ensure connections reflect actual system behavior
- **Abstraction Level**: Match diagram detail to audience and purpose
- **Currency**: Keep diagrams synchronized with system evolution

### Visual Clarity
- **Logical Grouping**: Group related components using subgraphs
- **Consistent Notation**: Use standardized shapes and colors for component types
- **Readable Layout**: Optimize for comprehension over completeness
- **Legend Support**: Include explanations for complex notation

## Integration Points

**File Registry Integration:**
- Use FILE_REGISTRY.md to understand current system structure
- Map file organization to component architecture
- Identify component boundaries from directory structure

**Task System Integration:**
- Visualize task flow through system components
- Show how rules interact with task lifecycle
- Map task data storage and retrieval patterns

**Documentation Integration:**
- Include architecture diagrams in project documentation
- Link diagrams to relevant system documentation
- Maintain architectural decision records with visual support

---

*This rule provides essential architectural visualization to support system understanding, planning, and evolution decisions.*
