---
description:
globs:
alwaysApply: true
---
# Bug Tracking Workflow Rule

Whenever you use this rule, start your message with the following:

"Initiating bug tracking workflow..."

This rule provides structured bug identification, categorization, and tracking within the fstrent_tasks_v2 system, ensuring consistent documentation and resolution tracking for all software defects.

## Purpose

Transform bug reports and discovered issues into trackable tasks with proper categorization, source attribution, and resolution workflows that integrate seamlessly with the existing task management system.

## Bug Classification

### Severity Levels
- **Critical**: System crashes, data loss, security vulnerabilities
- **High**: Major feature failures, performance degradation >50%
- **Medium**: Minor feature issues, usability problems
- **Low**: Cosmetic issues, enhancement requests

### Source Attribution
- **User Reported**: Issues reported by end users or stakeholders
- **Development**: Bugs discovered during feature development
- **Testing**: Issues found during QA or automated testing
- **Production**: Live environment issues requiring immediate attention

## Bug Task Template

```yaml
---
id: {next_available_id}
title: '[BUG] {Brief description of the issue}'
status: pending
priority: {severity_level}
created_date: '{discovery_date}'
project_context: 'Addresses {bug_type} affecting {system_component}, maintaining {expected_behavior}'
subsystems: '{affected_subsystems}'
estimated_effort: '{initial_estimate}'
bug_severity: '{critical|high|medium|low}'
bug_source: '{user_reported|development|testing|production}'
reproduction_environment: '{environment_details}'
---

## Bug Description
{Clear description of the unexpected behavior}

## Expected Behavior
{What should happen instead}

## Reproduction Steps
1. {Step-by-step instructions to reproduce the issue}
2. {Include specific data, settings, or conditions}
3. {Note any environmental dependencies}

## Error Messages/Screenshots
{Any error messages, stack traces, or visual evidence}

## Impact Assessment
- **Users Affected**: {user_count/percentage}
- **Frequency**: {how_often_occurs}
- **Workaround**: {temporary_solution_if_available}

## Investigation Notes
{Technical analysis, root cause findings, potential solutions}

## Resolution
{Implementation details when bug is fixed}
```

## Implementation Workflow

### Step 1: Bug Identification
- Classify severity using objective criteria
- Identify source and affected subsystems
- Assess immediate impact and urgency

### Step 2: Task Creation
- Generate bug task using template
- Include reproduction steps and environment details
- Set priority based on severity and impact

### Step 3: Investigation Tracking
- Document analysis progress in task file
- Update estimated effort as investigation progresses
- Link to related tasks or dependencies

### Step 4: Resolution Documentation
- Record fix implementation details
- Verify resolution across environments
- Archive to memory with lessons learned

## Integration Points

**Priority Mapping:**
- Critical bugs → critical priority tasks
- High bugs → high priority tasks  
- Medium bugs → medium priority tasks
- Low bugs → low priority tasks

**Subsystem Integration:**
- Link bugs to affected project subsystems
- Update subsystem documentation with known issues
- Track bug patterns for architectural improvements

**Memory Integration:**
- Archive resolved bugs with solution details
- Build searchable knowledge base of fixes
- Enable pattern recognition for similar issues

---

*This rule ensures bugs are systematically tracked, investigated, and resolved with proper documentation for future reference.*
