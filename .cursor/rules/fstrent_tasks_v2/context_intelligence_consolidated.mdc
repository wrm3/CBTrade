---
alwaysApply: true
---
# Context Intelligence Framework

Whenever you use this rule, start your message with the following:

"Activating context intelligence with scope validation..."

This comprehensive context intelligence system integrates project awareness, efficiency optimization, and scope boundary management into a unified framework for intelligent context management. It provides sophisticated project alignment with automatic efficiency monitoring and mandatory scope validation for agent coordination environments.

## Rule Activation Framework

```yaml
rule_activation:
  rule_name: "context_intelligence_framework"
  activation_triggers:
    - TASK_START_WORKFLOW        # Project context display and alignment
    - TASK_CREATION_WORKFLOW     # Context validation and scope checking
    - PROJECT_MILESTONE_UPDATE   # Context realignment and boundary updates
    - CONTEXT_EFFICIENCY_CHECK   # Automatic efficiency monitoring
    - SCOPE_BOUNDARY_VALIDATION  # Over-engineering prevention
    - MCP_TOOL_UTILIZATION      # Tool context optimization
  activation_level: MANDATORY
  bypass_conditions: ["emergency_operations", "context_maintenance", "simple_updates"]
  smart_activation_ready: true  # Structured for progressive disclosure
  agent_coordination_patterns: true  # Foundation for multi-agent context coordination
```

---

## I. PROJECT CONTEXT AWARENESS SYSTEM

### Core Purpose
Bridge between individual task execution and overall project objectives, ensuring every development action aligns with project goals while maintaining situational awareness across sessions and agent boundaries.

### Automatic Context Activation Points

#### 1. Task Start Workflow (MANDATORY)
When beginning any task (status: pending → inprogress):
- **MANDATORY**: Display PROJECT_CONTEXT.md overview
- **VALIDATE**: Ensure task includes proper `project_context` field
- **CONNECT**: Explain how current task relates to project goals
- **ORIENT**: Reference current phase and success criteria
- **SCOPE CHECK**: Validate task alignment with scope boundaries

#### 2. Task Creation Workflow (MANDATORY)
When creating new tasks:
- **REQUIRE**: Non-empty `project_context` field in YAML frontmatter
- **VALIDATE**: Context description connects task to project goals
- **SCOPE VALIDATE**: Check alignment with SCOPE_BOUNDARIES.md
- **SUGGEST**: Improvements to context clarity if description is vague
- **CHECK**: Alignment with current project phase objectives
- **PREVENT**: Over-engineering beyond scope boundaries

#### 3. Project Milestone Updates (TRIGGERED)
When project direction or goals change:
- **ASSESS**: Impact on active tasks and their context fields
- **RECOMMEND**: Updates to task context descriptions if needed
- **NOTIFY**: Dependencies that may be affected by goal changes
- **ARCHIVE**: Outdated context documentation with clear reasoning
- **UPDATE**: Scope boundaries if project evolution requires expansion

### Enhanced Context Display Framework

#### Integrated Project Overview Template
When displaying project context, use this structured format:

```
📋 **PROJECT CONTEXT OVERVIEW**

🎯 **Mission**: [Brief mission from PROJECT_CONTEXT.md]
📍 **Current Phase**: [Phase and focus area]
✅ **Success Criteria**: [Key objectives for current phase]
🔄 **Current Status**: [Active tasks, progress, blockers]
🛡️ **Scope Boundaries**: [Key limitations and approved complexity]

🎯 **Task Connection**: [How current task advances project goals]
⚠️ **Scope Validation**: [Confirmation task stays within boundaries]
📊 **Context Efficiency**: [Current context usage status]
```

### Context Management Operations

#### Primary Context Sources
- **`.fstrent_tasks_v2/PROJECT_CONTEXT.md`**: Mission, current phase, success criteria
- **`.fstrent_tasks_v2/plans/SCOPE_BOUNDARIES.md`**: Approved features and complexity limits
- **`.fstrent_tasks_v2/TASKS.md`**: Current development focus and active work
- **`.fstrent_tasks_v2/MCP_TOOLS_INVENTORY.md`**: Available automation capabilities

#### Context Validation Framework

**Task Context Quality Requirements:**
- `project_context` field must be non-null and non-empty (minimum 20 characters)
- Must reference specific project goals or phase objectives
- Should explain task's contribution to overall mission
- Must demonstrate alignment with scope boundaries
- Cannot introduce complexity beyond approved limits

**Context Quality Indicators:**
- **High Quality**: Specific project goal references, clear contribution explanation, scope-compliant
- **Poor Quality**: Generic descriptions, no goal connection, potential scope violations

---

## II. CONTEXT EFFICIENCY OPTIMIZATION SYSTEM

### MCP Tools Integration & Context Optimization

#### Tools Inventory Integration
**📖 ALWAYS CONSULT**: `.fstrent_tasks_v2/MCP_TOOLS_INVENTORY.md`

**Available Tool Categories:**
- **Database Tools**: MySQL/Oracle read-only and full CRUD operations
- **Web & Browser Tools**: Search, scraping, and full browser automation
- **Development Tools**: GitHub integration, documentation access, Python execution
- **System Tools**: Environment setup, task management, computer automation
- **File Operations**: Complete file and codebase management capabilities
- **Analysis Tools**: Sequential thinking, diagram creation, knowledge management

### Context Monitoring & Efficiency Framework

#### Automatic Context Tracking
Every response includes estimated context metrics:

```
---
Context Window: ~[estimated_current]/[model_limit] tokens (~[percentage]%)
Task Overhead: ~[estimated_task_tokens] tokens (~[percentage]% of used context)
MCP Tools Used: [manually_tracked_tools]
Scope Validation: [COMPLIANT|WARNING|VIOLATION]
Efficiency Status: [OPTIMAL|WARNING|CRITICAL]
Timestamp: [current_UTC_timestamp]
---
```

#### Efficiency Thresholds & Optimization
- **OPTIMAL**: Task management overhead ≤ 15% of used context
- **WARNING**: Task management overhead 16-25% of used context
- **CRITICAL**: Task management overhead > 25% of used context

#### Automatic Optimization Triggers
When efficiency status reaches WARNING or CRITICAL:
- Suggest task archival to memory system
- Recommend plan condensation strategies
- Propose context cleanup actions
- Alert user to potential performance impact
- Validate no scope boundary violations causing bloat

#### Context Management Strategies

**When Context Usage > 75%:**
- Archive completed tasks to memory immediately
- Condense verbose task descriptions while preserving scope compliance
- Remove redundant rule repetition
- Suggest breaking work into smaller focused sessions

**When Task Overhead > 20%:**
- Prioritize essential task information only
- Defer detailed documentation to completion
- Use task IDs instead of full descriptions when referencing
- Streamline response formats while maintaining scope validation

**Emergency Context Management (>90% usage):**
1. **IMMEDIATE**: Stop all non-essential operations
2. **PRIORITY**: Complete current critical task only
3. **ARCHIVE**: Move all completed work to memory
4. **SCOPE CHECK**: Ensure no scope violations caused overflow
5. **RESET**: Suggest starting fresh session with condensed context

---

## III. COMPREHENSIVE SCOPE BOUNDARY VALIDATION SYSTEM

### SCOPE_BOUNDARIES Document Management

**Location**: `.fstrent_tasks_v2/plans/SCOPE_BOUNDARIES.md`

**Enhanced Structure:**
```markdown
# Project Scope Boundaries

## Approved Features
- {Explicitly requested features with justification}

## Complexity Validation Matrix
- **Architecture**: {Simple/Standard/Complex} - {Rationale and constraints}
- **Database**: {File/Simple/Full} - {Justification and limits}
- **Authentication**: {None/Basic/Full} - {Requirements and scope}
- **UI**: {HTML/Framework/Advanced} - {Needs and complexity bounds}
- **API**: {None/Simple/REST/GraphQL} - {Scope and integration limits}

## Explicit Exclusions
- {Features NOT requested}
- {Complexity patterns to avoid}
- {Over-engineering prevention targets}

## Context Integration
- **Project Alignment**: {How scope supports project goals}
- **Phase Compatibility**: {Scope boundaries for current phase}
- **Resource Constraints**: {Scope limits based on available resources}

## Validation Checkpoints
- [ ] PRD Creation Validated
- [ ] Task Generation Validated
- [ ] Implementation Validated
- [ ] Context Efficiency Maintained
```

### Mandatory Scope Validation Triggers

#### A. PRD Creation Validation (MANDATORY)
- **VALIDATE**: All features explicitly requested and within boundaries
- **CHECK**: No assumptions about "obvious" needs beyond scope
- **CONFIRM**: Complexity matches approved expectations
- **REJECT**: Gold-plating or "nice-to-have" additions outside scope
- **CONTEXT**: Ensure scope decisions support project context

#### B. Task Generation Validation (MANDATORY)
- **SCOPE CHECK**: Tasks align with documented boundaries
- **COMPLEXITY AUDIT**: No over-engineering beyond approved levels
- **FEATURE BOUNDARY**: No feature creep outside defined scope
- **ARCHITECTURE**: Technical approach within complexity limits
- **CONTEXT INTEGRATION**: Task context aligns with scope constraints

#### C. Implementation Validation (MANDATORY)
- **BOUNDARY REVIEW**: Implementation plan respects limitations
- **COMPLEXITY CHECK**: Solution matches approved complexity level
- **FEATURE SCOPE**: No unapproved functionality introduced
- **REAL-TIME MONITORING**: Flag deviations immediately
- **CONTEXT ALIGNMENT**: Implementation supports project goals within scope

### Over-Engineering Prevention Framework

#### Database Complexity Prevention
**Triggers**: Data storage requirements mentioned
**Scope Validation**: Check against approved database complexity
**Prevention Rules**: Force file-based unless DB explicitly within scope
**Questions**: "Does scope approve database complexity? Can simpler approach work?"

#### Authentication Systems Prevention
**Triggers**: User management or security features mentioned
**Scope Validation**: Verify authentication complexity within approved bounds
**Prevention Rules**: Block auth systems unless explicitly within scope
**Questions**: "Was authentication complexity approved? Does scope validate this?"

#### Architecture Complexity Prevention
**Triggers**: System architecture design decisions
**Scope Validation**: Ensure architecture complexity matches scope boundaries
**Prevention Rules**: Default simple approach unless scope approves complexity
**Questions**: "Does scope approve complex architecture? Are simpler patterns sufficient?"

#### API Design Prevention
**Triggers**: API endpoint or service design
**Scope Validation**: Check API complexity against scope boundaries
**Prevention Rules**: Direct functions unless API explicitly within scope
**Questions**: "Does scope validate API complexity? Are internal functions sufficient?"

### Scope Deviation Management

#### Deviation Detection & Response
When scope boundary violation detected:
1. **HALT**: Stop implementation immediately
2. **ALERT**: "⚠️ SCOPE BOUNDARY VIOLATION DETECTED"
3. **CONTEXT**: Reference project context and scope rationale
4. **DOCUMENT**: Record proposed addition with impact analysis
5. **VALIDATE**: Check against PROJECT_CONTEXT.md alignment

#### Enhanced User Notification
```
⚠️ SCOPE BOUNDARY VIOLATION DETECTED

**Proposed**: {Feature/complexity addition}
**Original Scope**: {Reference to SCOPE_BOUNDARIES.md}
**Project Context**: {How this impacts project goals}
**Impact**: {Complexity/timeline/resource change}
**Context Efficiency**: {Impact on context window usage}

**Options**:
1. REJECT: Stay within approved scope boundaries
2. APPROVE: Expand scope with documentation update
3. DEFER: Add to future phase scope
4. CLARIFY: Request additional context or requirements

**Required**: Explicit user decision and scope documentation update
```

#### Scope Documentation Update Workflow
If scope expansion approved:
1. Update SCOPE_BOUNDARIES.md with new boundaries
2. Record justification and project context alignment
3. Notify related tasks of scope changes
4. Update context efficiency projections
5. Validate new scope against project constraints

---

## IV. INTEGRATED CONTEXT INTELLIGENCE WORKFLOWS

### Unified Context Validation Process

```
Context Intelligence Activation
    ↓
🔍 PROJECT CONTEXT ASSESSMENT
    ↓
1. Display Enhanced Project Overview
    ↓
2. Validate Task Context Alignment
    ↓
3. Check Scope Boundary Compliance
    ↓
4. Monitor Context Efficiency
    ↓
5. Apply Over-Engineering Prevention
    ↓
6. Generate Integrated Context Report
```

### Project Complexity Integration

#### Simple Project Context (Single user, local, prototype)
**Context Management**: Minimal context tracking, direct goal alignment
**Scope Enforcement**: 
- No authentication complexity
- File-based storage only
- Minimal error handling patterns
- Plain HTML/CSS within scope
- No external APIs unless scope-approved
- Monolithic architecture constraints

#### Team Project Context (Small team, shared)
**Context Management**: Enhanced context tracking, team goal alignment
**Scope Enforcement**:
- Basic authentication if scope-approved
- Simple database if within boundaries
- Standard error handling patterns
- Basic framework if scope-validated
- Simple REST if scope-compliant

#### Enterprise Project Context (Large scale, production)
**Context Management**: Comprehensive context tracking, enterprise goal alignment
**Scope Enforcement**:
- Full authentication if scope-approved
- Comprehensive database if within boundaries
- Advanced error handling if scope-validated
- Modern frameworks if scope-compliant
- Complete API design if scope-approved
- Scalable architecture if within scope

---

## V. AGENT COORDINATION FOUNDATION

### Multi-Agent Context Intelligence

This comprehensive context system provides foundation for distributed context coordination:

#### Specialized Context Agents
```yaml
context_agent_specialization:
  project_alignment_agent:
    focus: ["goal_tracking", "phase_management", "context_validation"]
    capabilities: ["project_context_analysis", "goal_alignment_verification", "phase_transition_management"]
    
  scope_validation_agent:
    focus: ["boundary_enforcement", "over_engineering_prevention", "complexity_management"]
    capabilities: ["scope_compliance_checking", "complexity_assessment", "boundary_violation_detection"]
    
  efficiency_monitoring_agent:
    focus: ["context_optimization", "resource_monitoring", "performance_tracking"]
    capabilities: ["context_usage_analysis", "efficiency_optimization", "resource_allocation"]
    
  context_coordination_agent:
    focus: ["multi_agent_coordination", "context_sharing", "intelligence_synthesis"]
    capabilities: ["agent_context_synchronization", "collaborative_validation", "context_conflict_resolution"]
```

#### Collaborative Context Workflows
- **Distributed Project Alignment**: Multiple agents maintain different aspects of project context
- **Parallel Scope Validation**: Simultaneous boundary checking across different complexity domains
- **Collaborative Efficiency Monitoring**: Agents share context optimization responsibilities
- **Cross-Agent Context Sharing**: Real-time context intelligence coordination

#### Context Intelligence Coordination
- **Project Goal Synthesis**: Multiple agents contribute to comprehensive project understanding
- **Scope Consensus**: Collaborative boundary validation and enforcement
- **Efficiency Optimization**: Multi-agent context resource management
- **Quality Assurance**: Cross-agent validation of context alignment and scope compliance

---

## VI. SYSTEM OPERATIONS & MONITORING

### Integrated Context Management Operations

#### Context Intelligence Responsibilities
1. **Project Alignment**: Maintain continuous alignment with project goals and phase objectives
2. **Scope Enforcement**: Apply boundary validation consistently across all development activities
3. **Efficiency Monitoring**: Track and optimize context resource utilization
4. **Context Validation**: Ensure all context information is accurate, relevant, and scope-compliant
5. **Agent Coordination**: Manage context intelligence across multiple agent interactions

### Continuous Context Monitoring

#### Real-Time Tracking Metrics
- **Project Alignment Score**: Percentage of tasks properly aligned with project context
- **Scope Compliance Rate**: Percentage of activities within approved boundaries
- **Context Efficiency**: Context window utilization vs. productivity output
- **Boundary Violations**: Count and impact of scope deviations
- **Context Quality**: Assessment of context information accuracy and relevance

#### Automated Optimization Actions
- **Immediate Context Cleanup**: Remove redundant context information
- **Scope Boundary Enforcement**: Block activities outside approved scope
- **Efficiency Optimization**: Streamline context usage patterns
- **Project Realignment**: Adjust task context for improved goal alignment

---

## VII. SMART ACTIVATION OPTIMIZATION

This comprehensive context intelligence rule is structured for smart activation through:

### Progressive Disclosure Levels

#### Level 1: Essential Context Operations
- Basic project context display and task alignment
- Simple scope boundary checking
- Core context efficiency monitoring
- Basic over-engineering prevention

#### Level 2: Intermediate Context Intelligence
- Enhanced project context integration with scope validation
- Comprehensive efficiency monitoring with optimization
- Advanced scope boundary enforcement
- MCP tool context optimization

#### Level 3: Advanced Context Sophistication
- Complete context intelligence coordination
- Complex scope deviation management
- Advanced context efficiency optimization
- Multi-project context management

#### Level 4: Agent Research & Coordination Mode
- Multi-agent context coordination patterns
- Distributed context intelligence concepts
- Collaborative scope validation frameworks
- Advanced context optimization concepts

### Context Efficiency Features

- **Modular Context Access**: Each context component can be activated independently
- **Scope-Based Loading**: Only relevant scope validation loaded based on project complexity
- **Efficiency-Driven Optimization**: Context usage adapts to available resources
- **Project-Adaptive Display**: Context information adapts to project phase and goals
- **Agent Coordination Concepts**: Advanced concepts available without impacting basic operations

This context intelligence framework preserves all sophisticated project alignment, efficiency optimization, and scope validation concepts while providing logical organization for efficient activation and future multi-agent context coordination development.
