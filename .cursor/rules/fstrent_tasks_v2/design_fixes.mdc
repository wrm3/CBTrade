---
description:
globs:
alwaysApply: true
---
# Design Fix Documentation Rule

Whenever you use this rule, start your message with the following:

"Documenting retroactive design fix..."

This rule provides a workflow for capturing and documenting design fixes, bug resolutions, and improvements that were completed in chat but need to be retroactively documented as tasks for historical context and memory preservation.

## Purpose

Transform ad-hoc chat fixes into proper task documentation to maintain project history, enable memory rule functionality, and ensure completed work is captured in the task system even when not originally planned.

## Activation Points

### Post-Fix Documentation Trigger
**When:** After completing any unplanned fix, improvement, or solution in chat
**Actions:**
1. Assess if the work merits task documentation
2. Generate retroactive task entry
3. Update TASKS.md with completed status
4. Archive to memory if appropriate

### Scope Assessment Criteria
**Document as retroactive task if:**
- ✅ Fix required >15 minutes of work
- ✅ Solution affects multiple files or subsystems  
- ✅ Fix provides value for future reference
- ✅ Resolution required technical analysis or debugging

**Skip documentation if:**
- ❌ Simple typo corrections
- ❌ Minor formatting adjustments
- ❌ Clarification-only conversations

## Retroactive Task Template

```yaml
---
id: {next_available_id}
title: '[RETROACTIVE] {Description of fix/improvement}'
status: completed
priority: {original_urgency_level}
created_date: '{fix_completion_date}'
completed_date: '{fix_completion_date}'
project_context: 'Documents previously completed {solution_type} that addressed {project_need}, maintaining {system_capability}'
subsystems: '{affected_subsystems}'
estimated_effort: '{actual_time_spent}'
actual_effort: '{actual_time_spent}'
---

## Problem Addressed
{Brief description of the issue that was resolved}

## Solution Implemented  
{Summary of what was done to fix the issue}

## Files Modified
{List of files that were changed during the fix}

## Verification
{How the fix was confirmed to work}

## Notes
- This task documents work completed retroactively in chat
- Original fix date: {completion_timestamp}
- Documented for historical context and memory system
```

## Implementation Workflow

### Step 1: Fix Assessment
- Review completed chat work against scope criteria
- Determine if retroactive documentation is warranted
- Identify affected subsystems and effort level

### Step 2: Task Creation
- Generate task file using retroactive template
- Assign next available task ID
- Mark status as 'completed' with actual completion date
- Include 'RETROACTIVE' prefix in title for clarity

### Step 3: System Integration
- Add entry to TASKS.md with completed status
- Update any affected subsystem documentation
- Archive to memory if task meets archival criteria

## Integration Points

**Memory Rule Integration:**
- Retroactive tasks become part of searchable history
- Enable memory rule to find relevant past solutions
- Provide context for similar future issues

**Context Management Integration:**
- Retroactive tasks include proper project_context field
- Connect completed work to overall project objectives
- Maintain continuity of project narrative

**Task System Integration:**
- Follow standard task numbering and status conventions
- Integrate with existing TASKS.md structure
- Respect task archival and memory workflows

---

*This rule ensures that valuable chat-based solutions are preserved in the task system for future reference and project continuity.*
