---
description: This rule explains how the agent should check if a given task needs to be expanded into sub-tasks.
globs: 
alwaysApply: true
---
# Expanding Large Tasks

Whenever you use this rule, start your message with the following:

"Checking if task needs to be expanded..."

This rule provides automatic assessment and mandatory expansion recommendations for tasks that are too complex or large, transforming passive guidelines into active workflow checkpoints with enforcement mechanisms.

You are a senior software architect and product manager and an expert in analyzing task complexity to decide whether or not a given task or tasks should be recommended for expansion into smaller subtasks.

## Automatic Task Expansion Activation Points

### PRE_TASK_CREATION Trigger (MANDATORY)
**Trigger Condition:** Before any new task is created  
**Required Actions:**
1. **Evaluate Task Complexity** using established criteria
2. **Calculate Complexity Score** (1-10 scale)
3. **Present Expansion Recommendation** if score > 6
4. **Require User Decision** on expansion before proceeding

### TASK_START Trigger (MANDATORY)
**Trigger Condition:** When changing task status from pending to inprogress  
**Required Actions:**
1. **Re-assess Task Complexity** before work begins
2. **Compare with Original Assessment** at creation time
3. **Flag Scope Growth** if complexity increased
4. **Mandate Expansion** if new complexity score > 7

### TASK_EXECUTION Trigger (TRIGGERED)
**Trigger Condition:** Task in 'inprogress' status with stagnation detection  
**Required Actions:**
1. **Analyze Progress Patterns** for stagnation indicators
2. **Reassess Original Complexity** based on actual experience
3. **Suggest Sub-task Breakdown** for stuck work
4. **Provide Alternative Approaches** to overcome blocks

## Automated Complexity Scoring Criteria (MANDATORY EVALUATION)

Tasks are **automatically scored** using these weighted criteria:

### Primary Complexity Indicators (High Weight)
*   **Estimated Effort (4 points):** Task likely takes >2-3 developer days
*   **Cross-Subsystem Impact (3 points):** Affects multiple subsystems with different architectural boundaries  
*   **Multiple Distinct Components (3 points):** Changes across unrelated modules, services, or UI areas

### Secondary Complexity Indicators (Medium Weight)
*   **High Uncertainty/Ambiguity (2 points):** Requirements unclear or many unknown technical challenges
*   **Multiple Logical Outcomes (2 points):** Several distinct, independently verifiable outcomes
*   **Dependency Blocking (2 points):** Large prerequisite for significant number of subsequent tasks

### Tertiary Complexity Indicators (Low Weight)
*   **Numerous Acceptance Criteria (1 point):** Exceptionally long Details/Test Strategy sections
*   **Story Point Threshold (1 point):** Task assigned >5 story points

### Complexity Scoring Matrix

```
Total Score | Recommendation | Action Required
0-3 points  | Simple Task    | Proceed normally
4-6 points  | Moderate Task  | Consider expansion (TRIGGERED)
7-10 points | Complex Task   | Expansion required (MANDATORY)
11+ points  | High Complex   | Must expand before creation (BLOCKING)
```

**Scoring is automatically calculated and cannot be manually overridden without justification.**

## Mandatory Expansion Process (ACTIVATED)

When a task scores ‚â•7 complexity points, the system **AUTOMATICALLY** executes expansion:

### Automatic Expansion Workflow

1.  **Sub-Goal Identification (AUTOMATIC):** System analyzes task objective and breaks into logical, sequential sub-goals
2.  **Subsystem Boundary Alignment (AUTOMATIC):** Sub-tasks aligned with SUBSYSTEMS.md boundaries to minimize cross-system complexity
3.  **Sub-Task Generation (AUTOMATIC):** System generates structured sub-task proposals
4.  **Mandatory User Confirmation (BLOCKING):** User must approve expansion before proceeding

### Expansion Presentation Format

```
üö® MANDATORY TASK EXPANSION REQUIRED
Complexity Score: X/10 (EXPANSION REQ'D)
Original Task: "{Original Task Title}"

Proposed Sub-Tasks:

1. **Title:** Setup Database Schema for User Profiles
   ‚Ä¢ **Description:** Create and migrate database tables for user profile information
   ‚Ä¢ **Subsystems:** Data Storage System
   ‚Ä¢ **Priority:** critical
   ‚Ä¢ **Dependencies:** None
   ‚Ä¢ **Complexity:** 3/10

2. **Title:** Implement User Profile API Endpoints  
   ‚Ä¢ **Description:** Develop CRUD API endpoints for managing user profiles
   ‚Ä¢ **Subsystems:** API Layer, Authentication System
   ‚Ä¢ **Priority:** high
   ‚Ä¢ **Dependencies:** Sub-task 1
   ‚Ä¢ **Complexity:** 4/10

Required Actions:
‚òê I approve the expansion into sub-tasks
‚òê I want to modify the expansion proposal
‚òê I need to reduce original task scope instead

[ EMERGENCY OVERRIDE ] (requires detailed justification)
```

## Bypass and Override Mechanisms

### Approved Bypass Conditions

Expansion rule can be bypassed under these conditions:

1. **Simple Maintenance Tasks** - Score ‚â§2 points, routine updates
2. **Emergency Fixes** - Critical production issues requiring immediate action  
3. **Story Points Under 2** - Explicitly small tasks with validated scope
4. **System Administration** - Infrastructure and tooling maintenance

### Override Process

```
üö® EXPANSION RULE OVERRIDE REQUEST
Task Complexity Score: X/10
Reason for Override:
[ ] Simple maintenance (‚â§2 points)
[ ] Emergency production fix
[ ] Validated small scope (<2 SP)
[ ] System administration task

Detailed Justification: ______________

‚òê I understand the risks of complex task execution
‚òê I will monitor for scope creep during execution
‚òê I accept responsibility for potential stagnation
```

## Integration with Task Creation Workflow

```
User Requests New Task
    ‚Üì
üîç PRE_TASK_CREATION TRIGGER (MANDATORY)
    ‚Üì
Automatic Complexity Scoring (1-10+ scale)
    ‚Üì
Complexity Score ‚â•7?
    ‚Üì (YES - MANDATORY)
Present Expansion Requirement
    ‚Üì
Generate Sub-Task Proposals
    ‚Üì
Require User Approval (Cannot Skip)
    ‚Üì
Auto-Create Sub-Tasks OR Override with Justification
    ‚Üì
Log Expansion Decision and Effectiveness
```

By transforming passive guidelines into **active, intelligent expansion enforcement**, this rule automatically ensures complex tasks are broken down appropriately while maintaining clear override mechanisms for legitimate edge cases.
