---
description:
globs:
alwaysApply: true
---
# File Tracking and Registry Rule

Whenever you use this rule, start your message with the following:

"Updating file registry..."

This rule maintains project structure documentation through automated FILE_REGISTRY.md updates, tracking file purposes, dependencies, and architectural relationships for improved navigation and understanding.

## Purpose

Provide systematic documentation of project file structure and relationships, enabling quick orientation for new developers and maintaining architectural awareness as projects evolve.

## File Categories

### Core Categories
- **Config**: Configuration files, environment settings, build scripts
- **Source**: Application code, business logic, utilities
- **Data**: Schemas, migrations, seed data, static resources
- **Tests**: Unit tests, integration tests, test utilities
- **Docs**: Documentation, README files, architectural diagrams
- **Tools**: Build tools, scripts, development utilities

## Registry Update Triggers

### Automatic Updates
- File creation or deletion in monitored directories
- Significant file modifications (>50% content change)
- Dependency imports/exports changes
- Architecture or subsystem modifications

### Manual Updates
- Major refactoring completion
- New feature integration
- Subsystem boundary changes
- Documentation review cycles

## File Registry Template

```markdown
# Project File Registry

*Last Updated: {current_date}*

## Configuration Files
| File | Purpose | Dependencies | Notes |
|------|---------|--------------|-------|
| {filename} | {brief_purpose} | {key_dependencies} | {important_notes} |

## Source Code Structure
| Directory/File | Purpose | Key Components | Integrations |
|----------------|---------|----------------|--------------|
| {path} | {functionality} | {main_classes/functions} | {external_connections} |

## Data and Resources
| File | Type | Usage | Maintenance |
|------|------|-------|-------------|
| {filename} | {data_type} | {primary_use_case} | {update_frequency} |

## Testing Infrastructure
| Test File | Coverage | Dependencies | Run Command |
|-----------|----------|--------------|-------------|
| {test_file} | {what_it_tests} | {test_dependencies} | {execution_method} |

## Documentation Files
| Document | Scope | Audience | Update Trigger |
|----------|-------|----------|----------------|
| {doc_file} | {content_scope} | {target_readers} | {when_to_update} |

## Development Tools
| Tool/Script | Function | Usage Context | Dependencies |
|-------------|----------|---------------|--------------|
| {tool_name} | {primary_function} | {when_used} | {requirements} |

## Architecture Notes
- **Core Subsystems**: {list_main_subsystems}
- **Data Flow**: {describe_main_data_paths}
- **Integration Points**: {external_service_connections}
- **Deployment Structure**: {build_and_deploy_overview}
```

## Implementation Workflow

### Step 1: Initial Registry Creation
- Scan project directories for categorizable files
- Generate initial FILE_REGISTRY.md using template
- Identify core architectural patterns and dependencies

### Step 2: Ongoing Maintenance
- Update registry when files are added/removed/significantly modified
- Review and refresh architectural notes during major changes
- Maintain accuracy of dependency and integration information

### Step 3: Integration Points
- Link registry updates to task completion
- Reference registry in onboarding documentation
- Use registry for architectural decision documentation

## Registry Maintenance

### File Monitoring Scope
- Source code directories (`/src`, `/app`, `/lib`)
- Configuration files (`.env`, `config.*`, build files)
- Documentation directories (`/docs`, README files)
- Test directories (`/tests`, `/spec`)

### Update Frequency
- Immediate: File creation/deletion
- Weekly: Dependency relationship reviews
- Monthly: Architectural notes refresh
- Per-release: Comprehensive accuracy review

---

*This rule ensures project file structure remains documented and accessible for team navigation and architectural understanding.*
