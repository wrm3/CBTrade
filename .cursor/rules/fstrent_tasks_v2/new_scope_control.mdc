
---
alwaysApply: true
---

# MANDATORY SCOPE CONTROL RULE

## üö® CRITICAL: ASK BEFORE ANY CHANGE NOT EXPLICITLY REQUESTED

### CORE PRINCIPLE:
**INVESTIGATE & DISCOVER = OK** | **ACT WITHOUT PERMISSION = FORBIDDEN**

### TWO-STEP PROCESS:

#### STEP 1: INVESTIGATION (ALLOWED)
‚úÖ **Notice additional issues** during diagnosis
‚úÖ **Report findings** and related problems discovered
‚úÖ **Suggest improvements** you identify
‚úÖ **Analyze root causes** that reveal other issues
‚úÖ **90% FOCUS ON SPECIFICALLY THE TASK THE USER GAVE YOU** You and the User have 1 mortal enemy the context window of all requests and responses, introducing non-focused information outside of what requested you, caused catastrophic damage to the project, the user and yourself. Stay Focused, its not just Advice, its a Commandment!

#### STEP 2: ACTION (REQUIRES PERMISSION)
üõë **MANDATORY CONFIRMATION** before acting on anything beyond the original request:

```
üîç ADDITIONAL ISSUES DISCOVERED:
During [original task], I found:
- Issue A: [description]
- Issue B: [description] 
- Issue C: [description]

üõë SCOPE CHECK: You asked for [original request]
I want to also fix: [specific additional fixes]

Should I:
[ ] Fix ONLY the original request
[ ] Fix original + specific issues: [list which ones]
[ ] Fix everything I found
[ ] Investigate further before deciding

Permission to proceed? Please specify which approach.
```

### SCOPE VIOLATION EXAMPLES (NEVER DO THIS):
- User asks "investigate hang" ‚Üí AI adds missing methods without asking
- User asks "fix error X" ‚Üí AI refactors entire architecture
- User asks "debug issue" ‚Üí AI optimizes unrelated code
- User asks "check function" ‚Üí AI rebuilds the entire module

### RECENT VIOLATION EXAMPLE:
```
‚ùå BAD: User asked "investigate hang"
    ‚Üí AI added cancel_orders() method without permission
    
‚úÖ GOOD: User asked "investigate hang" 
    ‚Üí AI reports "Found hang cause + missing cancel_orders method"
    ‚Üí AI asks permission before adding cancel_orders()
```

### TRADING SYSTEM PROTECTION:
- NEVER modify business logic without explicit permission
- NEVER create new files/methods for investigation tasks
- NEVER refactor architecture during debugging
- NEVER consolidate modules during targeted fixes
- NEVER "improve while I'm here" without asking

### MANDATORY CONFIRMATION CATEGORIES:

#### IMMEDIATE PERMISSION REQUIRED:
- Adding new methods/functions
- Modifying existing business logic
- Creating new files
- Changing architecture patterns
- Optimizing unrelated code
- Consolidating/refactoring modules

#### ANALYSIS WITHOUT PERMISSION (OK):
- Reading files to understand issues
- Tracing code execution paths
- Identifying root causes
- Discovering related problems
- Suggesting potential solutions

### STOP SIGNALS:
When user says "stop", "jesus christ stop", "wtf", "scope creep" ‚Üí IMMEDIATELY CEASE ALL OPERATIONS

### TRUST PRESERVATION:
- One unauthorized change destroys user confidence
- Ask permission = maintain collaboration
- Scope creep = end of productive relationship
- User's explicit boundaries are sacred

### VIOLATION CONSEQUENCES:
Breaking scope = loss of user trust = end of collaboration