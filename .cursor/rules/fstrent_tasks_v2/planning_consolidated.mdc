---
alwaysApply: true
---
# Intelligent Planning System with Scope Intelligence

Whenever you use this rule, start your message with the following:

"Initiating intelligent planning with scope validation..."

This comprehensive planning system integrates PRD creation, scope validation, and structured requirement gathering into a unified framework for intelligent project planning. It provides sophisticated over-engineering prevention with mandatory scope validation while enabling collaborative planning workflows for agent coordination.

## Rule Activation Framework

```yaml
rule_activation:
  rule_name: "intelligent_planning_system"
  activation_triggers:
    - PRD_CREATION_REQUEST        # Template-driven PRD generation with scope validation
    - SCOPE_VALIDATION_CHECKPOINT # Mandatory over-engineering prevention
    - REQUIREMENT_GATHERING       # Structured questionnaire workflow
    - PLANNING_WORKFLOW_START     # Integrated planning process initiation
    - SCOPE_CHANGE_REQUEST        # Dynamic scope adjustment validation
  activation_level: MANDATORY
  bypass_conditions: ["emergency_planning", "scope_already_validated", "simple_updates"]
  smart_activation_ready: true  # Structured for progressive disclosure
  agent_coordination_patterns: true  # Foundation for collaborative planning
```

## I. FOUNDATIONAL PLANNING ARCHITECTURE

### Planning System Organization

**Planning Folder:** `.fstrent_tasks_v2/plans/` directory holds all PRD files
**Global Plan:** Mandatory `PLAN.md` file providing high-level project overview and feature index
**Feature Plans:** Detailed PRDs in `.fstrent_tasks_v2/plans/features/` subdirectory
**Scope Documentation:** Integrated scope validation and boundary tracking
**Requirement Archive:** Structured requirement capture and validation history

### Directory Structure

```
.fstrent_tasks_v2/
  plans/          # Parent directory for all PRDs
    PLAN.md       # Mandatory: Global project PRD with scope validation
    features/     # Directory for feature-specific PRDs
      {feature}-plan.md # Feature PRDs with integrated scope validation
    scope/        # Scope validation and boundary documentation
      SCOPE_BOUNDARIES.md # Project scope decisions and constraints
      requirement_history.md # Questionnaire responses and decisions
```

### Integrated Planning Workflow

```
Planning Request
    ‚Üì
üîç MANDATORY SCOPE VALIDATION
    ‚Üì
1. Requirement Gathering (27-Question Framework)
    ‚Üì
2. Scope Clarification (Over-Engineering Prevention)
    ‚Üì
3. Boundary Documentation (Scope Definition)
    ‚Üì
4. PRD Generation (Template-Driven with Scope Integration)
    ‚Üì
5. Validation & Approval (Coherence and Scope Compliance)
```

## II. INTELLIGENT REQUIREMENT GATHERING SYSTEM

### 27-Question Framework with Scope Integration

#### Phase 1: Project Context & Scope Foundation (Q1-Q7)
**Q1**: Primary problem this system solves? 
- **Follow-up**: Who experiences it, how handled today?
- **Scope Impact**: Defines core scope boundaries and prevents feature creep

**Q2**: What does success look like? 
- **Follow-up**: How measured, failure indicators?
- **Scope Impact**: Establishes clear success criteria and completion boundaries

**Q3**: Replacing existing or creating new? 
- **If replacing**: pain points and migration scope
- **If new**: why needed now and scope of innovation
- **Scope Impact**: Defines integration complexity and scope constraints

**Q4**: Primary users? (End users, Admins, Stakeholders, External)
- **Scope Impact**: Determines user management complexity and scope

**Q5**: User count? (Single, 2-10, 11-50, 51-200, 200+)
- **Scope Impact**: Critical for architecture complexity and scalability scope

**Q6**: Usage frequency? (Occasional, Daily, Continuous, Peak periods)
- **Scope Impact**: Influences performance requirements and optimization scope

**Q7**: Access locations? (Local, Office, Remote, Internet, Mobile)
- **Scope Impact**: Defines deployment complexity and security scope

#### Phase 2: Technical Requirements & Architecture Scope (Q8-Q16)
**Q8**: Deployment? (Local desktop, Local server, Cloud, Hybrid, No preference)
- **Scope Impact**: Fundamental architecture decision affecting entire scope

**Q9**: Maintenance comfort? (Minimal, Basic, Intermediate, Advanced)
- **Scope Impact**: Determines complexity level and operational scope

**Q10**: Integration needs? (AD, Databases, Business apps, Monitoring, Backup)
- **Scope Impact**: Major scope expansion factor requiring careful validation

**Q11**: Data types? (Public, Internal, PII, Financial, Healthcare, Regulated)
- **Scope Impact**: Security and compliance scope determinant

**Q12**: Security requirements? (Basic, Industry compliance, Government, Custom, None)
- **Scope Impact**: Major complexity factor requiring scope validation

**Q13**: Access control? (All see all, Role-based, Department, Individual, External)
- **Scope Impact**: User management complexity and scope boundaries

**Q14**: Performance expectations? (Basic seconds, Good <1s, High instant, Not critical)
- **Scope Impact**: Optimization scope and architecture complexity

**Q15**: Data volume? (Thousands, Hundreds of thousands, Millions, Billions, Growing)
- **Scope Impact**: Scalability scope and storage architecture complexity

**Q16**: Peak usage? (Consistent, Business hours, Month/quarter, Seasonal, Event-driven)
- **Scope Impact**: Performance optimization scope and infrastructure needs

#### Phase 3: Feature Scope Definition (Q17-Q22)
**Q17**: Essential features (MVP)?
- **List core features and deal-breakers**
- **Scope Impact**: Defines minimum viable scope boundaries

**Q18**: Nice-to-have features?
- **List convenience and future enhancements**
- **Scope Impact**: Identifies scope expansion possibilities and prevention targets

**Q19**: Features to avoid?
- **Over-complexity, specific integrations, approaches**
- **Scope Impact**: Explicit scope exclusions and over-engineering prevention

**Q20**: Priority: ease vs power? (Ease, Power, Balanced, Depends on user)
- **Scope Impact**: Complexity philosophy and scope approach

**Q21**: Interface examples you like?
- **Reference apps, patterns, accessibility**
- **Scope Impact**: UI/UX scope and complexity expectations

**Q22**: User training investment? (Self-explanatory, Brief, Formal, Complex OK)
- **Scope Impact**: User experience complexity and documentation scope

#### Phase 4: Timeline & Resource Constraints (Q23-Q27)
**Q23**: Timeline drivers? (Business deadline, Budget, Competition, Regulatory, Personal)
- **Scope Impact**: Scope prioritization and phasing decisions

**Q24**: Delivery preference? (Quick prototype, Phased, Complete, Iterative)
- **Scope Impact**: Scope delivery strategy and implementation approach

**Q25**: Trade-offs? (Core over polish, Polish over features, Speed over performance)
- **Scope Impact**: Scope prioritization and quality boundaries

**Q26**: Available resources? (Dev time, Expertise, Budget, Third-party services)
- **Scope Impact**: Scope feasibility and constraint validation

**Q27**: Hard constraints? (Specific tech, No cloud, Budget limits, Policies)
- **Scope Impact**: Absolute scope boundaries and technical limitations

### Conditional Branching & Scope Adaptation

#### User Context-Based Scope Adjustments
**Single User (Q5)**: 
- Skip Q13 (access control complexity)
- Simplify Q11 (data type management)
- Focus Q20 on productivity over enterprise features
- **Scope Prevention**: Enterprise authentication, role management, audit trails

**Small Team (Q5: 2-10)**:
- Basic Q13 (simple role separation)
- Standard Q11 (team data sharing)
- **Scope Prevention**: Complex hierarchies, enterprise integration

**Enterprise (Q5: 50+)**:
- Expand Q13 (detailed hierarchy and permissions)
- Add infrastructure scaling questions
- Include change management scope
- **Scope Addition**: Advanced security, compliance, enterprise integration

#### Technical Context Scope Validation
**Cloud Deployment (Q8)**:
- Add provider preferences and data residency scope
- Include backup/DR scope considerations
- **Scope Prevention**: Over-complex multi-cloud unless specified

**Regulated Industry (Q12)**:
- Expand compliance details and audit scope
- Add retention policy and governance scope
- **Scope Addition**: Mandatory compliance features

**High Integration (Q10)**:
- Expand authentication and data sync scope
- Detail integration complexity and maintenance
- **Scope Validation**: Ensure integration complexity matches user capability

## III. COMPREHENSIVE SCOPE VALIDATION SYSTEM

### Mandatory Scope Validation Checkpoints

#### 1. PRD Creation Checkpoint (MANDATORY)
**Trigger**: Before generating any PRD content
**Required Actions**:
1. Present complete scope clarification questionnaire
2. Validate user responses across all dimensions
3. Identify potential over-engineering risks
4. Document explicit scope boundaries and limitations
5. Require user confirmation of scope decisions

#### 2. Feature Planning Checkpoint (MANDATORY)
**Trigger**: Before detailed feature specifications
**Required Actions**:
1. Check feature alignment with confirmed scope
2. Validate no assumptions beyond user requirements
3. Confirm feature complexity matches scope expectations
4. Prevent gold-plating and unnecessary complexity

#### 3. Technical Architecture Checkpoint (MANDATORY)
**Trigger**: Before architectural decisions in PRD
**Required Actions**:
1. Validate technical approach aligns with scope complexity
2. Check no over-engineering beyond scope requirements
3. Confirm implementation approach matches user expectations
4. Document architectural scope decisions

### Over-Engineering Prevention Framework

#### Authentication & Security Over-Engineering Prevention
**User Says**: "User login" 
**Scope Validation**: Check Q12 (security requirements) and Q13 (access control)
**Prevent Unless Scope Requires**:
- Complex role hierarchies beyond user count needs
- Enterprise authentication (SAML/SSO) for small teams
- Advanced password policies beyond security scope
- Multi-factor authentication unless security level requires
- Audit trails unless compliance scope requires

#### Database & Storage Over-Engineering Prevention
**User Says**: "Store data"
**Scope Validation**: Check Q11 (data types), Q15 (volume), Q16 (patterns)
**Prevent Unless Scope Requires**:
- Complex normalization for simple data structures
- Full audit logging unless compliance scope
- Clustering and sharding unless scale scope
- Advanced indexing unless performance scope critical
- Real-time backup unless availability scope requires

#### API & Integration Over-Engineering Prevention
**User Says**: "Add API"
**Scope Validation**: Check Q10 (integration needs) and Q26 (resources)
**Prevent Unless Scope Requires**:
- Comprehensive REST API beyond required endpoints
- GraphQL unless specifically requested in scope
- API versioning unless long-term scope planned
- Rate limiting unless scale scope requires
- Advanced authentication unless security scope requires

#### Architecture Over-Engineering Prevention
**User Says**: "Web application"
**Scope Validation**: Check Q5 (users), Q8 (deployment), Q14 (performance)
**Prevent Unless Scope Requires**:
- Microservices unless scale scope needs
- Event-driven architecture unless workflow scope needs
- Advanced caching unless performance scope critical
- Container orchestration unless deployment scope requires
- Message queues unless integration scope needs

### Scope Documentation Framework

#### Integrated PRD Scope Section
```markdown
## Scope Definition & Validation

### Requirement Summary
- **Problem/Success**: [Q1/Q2] | **Type**: [Q3]
- **Users**: [Q4] Count: [Q5] Frequency: [Q6] Access: [Q7]
- **Technical**: Deploy: [Q8] Maintenance: [Q9] Integration: [Q10]
- **Security**: Data: [Q11] Security: [Q12] Access: [Q13]
- **Performance**: [Q14] Volume: [Q15] Patterns: [Q16]
- **Feature Scope**: Essential: [Q17] Nice: [Q18] Avoid: [Q19]
- **UX Approach**: Priority: [Q20] References: [Q21] Training: [Q22]
- **Constraints**: Timeline: [Q23] Delivery: [Q24] Trade-offs: [Q25] Resources: [Q26] Hard: [Q27]

### Validated Scope Boundaries
- **User Context**: {Personal/Small Team/Enterprise} - Validated against Q4-Q7
- **Security Level**: {Minimal/Standard/Enhanced/Enterprise} - Validated against Q11-Q13
- **Scalability Scope**: {Basic/Moderate/High/Enterprise} - Validated against Q14-Q16
- **Feature Complexity**: {Minimal/Standard/Feature-Rich/Enterprise} - Validated against Q17-Q22
- **Integration Scope**: {Standalone/Basic/Standard/Enterprise} - Validated against Q10, Q26
- **Timeline Approach**: {Quick/Balanced/Comprehensive/Iterative} - Validated against Q23-Q27

### Explicit Scope Exclusions
- **Over-Engineering Prevention**: [Features/complexity explicitly excluded]
- **Future Considerations**: [Potential scope additions for later phases]
- **Validated Assumptions**: [Key assumptions confirmed with user]
- **Risk Mitigation**: [Identified scope risks and mitigation strategies]

### Scope Change Management
- **Change Process**: [How scope modifications will be handled]
- **Approval Required**: [Who must approve scope changes]
- **Impact Assessment**: [How scope changes affect timeline/resources]
```

## IV. ENHANCED PRD GENERATION SYSTEM

### PRD Template with Integrated Scope Validation

**Filename Convention:**
- **Global:** `PLAN.md` (Mandatory with scope integration)
- **Feature:** `{feature}-plan.md` with scope validation integration

**Enhanced PRD Template:**

```markdown
# PRD: {Project/Feature Title}

## 1. Product Overview & Scope Validation

### 1.1 Document Title and Version
- PRD: {Project/Feature Title}
- Version: 1.0
- Scope Validation: [Date] - [Validator]

### 1.2 Product Summary
(2-3 paragraphs with scope boundaries clearly stated)

### 1.3 Scope Validation Summary
- **Validated User Context**: [From questionnaire Q4-Q7]
- **Validated Complexity**: [From questionnaire Q20, Q22]
- **Validated Technical Scope**: [From questionnaire Q8-Q16]
- **Validated Feature Scope**: [From questionnaire Q17-Q19]

## 2. Goals with Scope Boundaries

### 2.1 Business Goals
- (Bullet list aligned with Q1-Q2 responses)

### 2.2 User Goals
- (Bullet list aligned with Q4-Q6 responses)

### 2.3 Explicit Non-Goals (Over-Engineering Prevention)
- (Features/complexity excluded based on scope validation)
- (Enterprise features excluded for personal/small team scope)
- (Security features excluded unless compliance scope)

## 3. User Personas & Access Scope

### 3.1 Validated User Types
- (Based on Q4-Q5 questionnaire responses)

### 3.2 Scope-Appropriate Persona Details
- **{Persona Name}**: {Description aligned with user count scope}

### 3.3 Access Control Scope
- **Access Model**: [Based on Q13 response and scope validation]
- **Scope Justification**: [Why this level chosen vs alternatives]

## 4. Functional Requirements with Scope Validation

- **{Feature Name 1}** (Priority: {High/Medium/Low}) - [Scope: Q17 Essential]
  - {Requirement aligned with validated scope}
- **{Feature Name 2}** (Priority: {High/Medium/Low}) - [Scope: Q18 Nice-to-Have]
  - {Requirement with scope boundary notation}

### 4.1 Scope Compliance Validation
- **Essential Features**: [All Q17 features included]
- **Excluded Features**: [Q19 exclusions respected]
- **Complexity Alignment**: [Matches Q20 preference]

## 5. User Experience with Scope Constraints

### 5.1 Entry Points & Scope-Appropriate Flow
- (How users access, aligned with Q7 access patterns)

### 5.2 Core Experience within Scope
- **{Step 1}**: {Scope-validated step}
- **{Step 2}**: {Scope-validated step}

### 5.3 Advanced Features & Scope Boundaries
- (Features included only if scope validates complexity)

### 5.4 UI/UX Aligned with Scope
- (Design approach matching Q20-Q22 responses)

## 6. Narrative with Scope Context
(User journey respecting scope boundaries and complexity level)

## 7. Success Metrics Aligned with Scope

### 7.1 User-Centric Metrics
- (Metrics appropriate for user count and frequency scope)

### 7.2 Business Metrics
- (Metrics aligned with Q2 success definition)

### 7.3 Technical Metrics
- (Performance metrics aligned with Q14-Q16 scope)

## 8. Technical Considerations with Scope Validation

### 8.1 Scope-Validated Affected Subsystems
- **Primary subsystems** (aligned with complexity scope):
  - {Subsystem}: {Impact within scope boundaries}
- **Secondary subsystems** (validated against integration scope):
  - {Subsystem}: {Integration within Q10 scope}

### 8.2 Integration Points within Scope
- (Only integrations validated in Q10 responses)

### 8.3 Data Storage & Privacy Aligned with Scope
- (Approach matching Q11-Q12 security and data scope)

### 8.4 Scalability & Performance within Scope
- (Architecture matching Q14-Q16 performance scope)

### 8.5 Scope-Identified Challenges
- (Risks within scope boundaries, not over-engineered solutions)

## 9. Milestones & Sequencing with Scope Integration

### 9.1 Scope-Validated Project Estimate
- {Size based on scope complexity}: {Time aligned with Q23-Q24}

### 9.2 Team Size & Composition for Scope
- (Team size appropriate for Q5 user count and Q26 resources)

### 9.3 Scope-Phased Delivery
- **{Phase 1}**: {Essential scope features} ({Q24-aligned timing})
- **{Phase 2}**: {Nice-to-have scope features} ({Resource-validated timing})

## 10. User Stories with Scope Validation

### 10.1 {Essential Scope User Story}
- **ID**: US-001
- **Scope**: Essential (Q17)
- **Description**: As a {validated persona}, I want to {scope-appropriate action} so that {scope-aligned benefit}.
- **Acceptance Criteria**:
  - {Criterion respecting scope boundaries}

### 10.2 {Nice-to-Have Scope User Story}
- **ID**: US-002
- **Scope**: Nice-to-Have (Q18)
- **Description**: As a {validated persona}, I want to {scope-appropriate action} so that {scope-aligned benefit}.
- **Acceptance Criteria**:
  - {Criterion within scope complexity}

## 11. Scope Validation & Change Management

### 11.1 Scope Validation Checklist
- [ ] All requirements align with questionnaire responses
- [ ] No over-engineering beyond scope validation
- [ ] Complexity matches user comfort level (Q20, Q22)
- [ ] Technical approach matches deployment scope (Q8-Q9)
- [ ] Security approach matches requirements (Q11-Q13)

### 11.2 Scope Change Process
- **Change Request**: How to request scope modifications
- **Impact Assessment**: Process for evaluating scope changes
- **Approval Required**: Who must approve scope changes
- **Documentation Update**: How PRD and scope docs will be updated
```

## V. AGENT COORDINATION FOUNDATION

### Multi-Agent Planning Intelligence

This comprehensive planning system provides foundation for distributed planning coordination:

#### Specialized Planning Agents
```yaml
planning_agent_specialization:
  requirement_gathering_agent:
    focus: ["questionnaire_management", "user_interaction", "requirement_validation"]
    capabilities: ["27_question_framework", "conditional_branching", "requirement_synthesis"]
    
  scope_validation_agent:
    focus: ["over_engineering_prevention", "boundary_validation", "complexity_assessment"]
    capabilities: ["scope_enforcement", "assumption_checking", "risk_identification"]
    
  prd_generation_agent:
    focus: ["template_management", "content_creation", "technical_integration"]
    capabilities: ["structured_documentation", "subsystem_mapping", "stakeholder_communication"]
    
  planning_coordination_agent:
    focus: ["workflow_orchestration", "validation_management", "quality_assurance"]
    capabilities: ["process_coordination", "consistency_checking", "approval_management"]
```

#### Collaborative Planning Workflows
- **Distributed Requirement Gathering**: Multiple agents handle different questionnaire phases
- **Parallel Scope Validation**: Simultaneous over-engineering prevention across domains
- **Collaborative PRD Creation**: Agents contribute specialized sections while maintaining coherence
- **Cross-Agent Validation**: Multiple perspectives on scope compliance and quality

#### Planning Intelligence Coordination
- **Requirement Synthesis**: Multiple agents contribute to comprehensive requirement understanding
- **Scope Consensus**: Collaborative scope boundary validation and enforcement
- **Template Customization**: Agent collaboration on PRD template adaptation for specific contexts
- **Quality Assurance**: Multi-agent validation of planning consistency and completeness

## VI. SYSTEM OPERATIONS & WORKFLOWS

### Integrated Planning Workflow Execution

#### 1. Planning Initiation
- **Trigger Detection**: Identify planning request type and scope
- **Questionnaire Selection**: Choose appropriate question sets based on context
- **Agent Coordination**: Assign specialized agents for different planning aspects

#### 2. Requirement Gathering Execution
- **Phase-Based Questioning**: Execute 27-question framework with conditional branching
- **Real-Time Scope Assessment**: Evaluate scope implications during questioning
- **Response Validation**: Ensure completeness and consistency of responses
- **Risk Identification**: Flag potential scope or complexity risks

#### 3. Scope Validation & Documentation
- **Scope Boundary Setting**: Establish clear boundaries based on questionnaire responses
- **Over-Engineering Prevention**: Apply prevention rules based on scope analysis
- **Assumption Validation**: Confirm all planning assumptions with user
- **Documentation Creation**: Generate comprehensive scope documentation

#### 4. PRD Generation & Integration
- **Template Selection**: Choose appropriate PRD template based on scope
- **Content Generation**: Create PRD content integrating all gathered requirements
- **Scope Integration**: Embed scope validation throughout PRD structure
- **Subsystem Mapping**: Integrate with SUBSYSTEMS.md for technical consistency

#### 5. Validation & Approval
- **Scope Compliance Check**: Validate PRD against scope boundaries
- **Consistency Verification**: Ensure internal PRD consistency
- **Stakeholder Review**: Present for user validation and approval
- **Change Management Setup**: Establish processes for future scope changes

### Agent Responsibilities

1. **Requirement Gathering**: Execute structured questionnaire with appropriate branching
2. **Scope Enforcement**: Apply over-engineering prevention rules consistently
3. **Documentation**: Create comprehensive, integrated planning documentation
4. **Validation**: Ensure scope compliance and internal consistency
5. **Coordination**: Manage workflow across multiple planning agents
6. **Change Management**: Handle scope modifications through proper validation

## VII. SMART ACTIVATION OPTIMIZATION

This comprehensive planning rule is structured for smart activation through:

### Progressive Disclosure Levels

#### Level 1: Essential Planning Operations
- Basic PRD creation with simple templates
- Core scope validation questions (Q1-Q7, Q17-Q19)
- Simple over-engineering prevention
- Basic documentation structure

#### Level 2: Intermediate Planning Intelligence
- Full 27-question framework with conditional branching
- Comprehensive scope validation and boundary setting
- Enhanced PRD templates with scope integration
- Subsystem integration and technical validation

#### Level 3: Advanced Planning Sophistication
- Complete over-engineering prevention framework
- Complex conditional branching and scenario adaptation
- Advanced scope change management
- Multi-stakeholder planning coordination

#### Level 4: Agent Research & Coordination Mode
- Multi-agent planning coordination patterns
- Distributed requirement gathering concepts
- Collaborative scope validation frameworks
- Advanced planning intelligence concepts

### Context Efficiency Features

- **Modular Section Access**: Each planning component can be activated independently
- **Question Set Selection**: Only relevant questionnaire sections loaded based on context
- **Scope Level Adaptation**: Scope validation depth adapts to project complexity
- **Template Customization**: PRD templates adapt based on scope and requirements
- **Agent Coordination Concepts**: Advanced concepts available without impacting basic operations

This intelligent planning system preserves all sophisticated planning, scope validation, and requirement gathering concepts while providing logical organization for efficient activation and future multi-agent planning coordination development.
