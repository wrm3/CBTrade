---
description: 
globs: 
alwaysApply: true
---
---
description: Comprehensive integration testing procedures for rule activation validation (optional)
globs: 
alwaysApply: false
---

# Rule Activation Integration Tests

Whenever you use this rule, start your message with the following:

"Testing rule activation framework..."

This rule validates rule activation points, bypass prevention, and effectiveness tracking.

## Test Framework Overview

Validates:
- Mandatory triggers activate at workflow points
- Bypass prevention mechanisms work
- User confirmation requirements enforced
- Effectiveness tracking and logging accurate
- Rule-to-rule communication functions

## Test Categories

### 1. Memory Rule Tests

#### 1.1: PRE_TASK_CREATION Memory Trigger
**Scenario:** Create task triggering memory consultation
**Expected:** Memory rule activates before task creation

**Steps:**
1. Create task with keywords matching archived work
2. Verify "üß† MANDATORY MEMORY CONSULTATION" message
3. Confirm TASKS_LOG.md search occurs
4. Validate historical findings presented
5. Test bypass blocking (should fail)
6. Provide acknowledgment, verify proceed
7. Confirm logging

**Success:** ‚úÖ Auto-activation, context presented, acknowledgment required, logged

#### 1.2: POST_TASK_COMPLETION Archival Trigger
**Scenario:** Accumulate 5+ completed tasks
**Expected:** Archival activates at threshold

**Steps:**
1. Complete 5+ tasks in .fstrent_tasks_v2/tasks/
2. Verify "üóÇÔ∏è MANDATORY ARCHIVAL REQUIRED" message
3. Confirm archival proposal presented
4. Test bypass blocking
5. Approve archival, verify file moves
6. Validate TASKS_LOG.md updates

**Success:** ‚úÖ Threshold trigger, bypass blocked, files moved, logged

### 2. Expand Rule Tests

#### 2.1: PRE_TASK_CREATION Complexity Assessment
**Scenario:** Create complex task (score ‚â•7)
**Expected:** Expansion required

**Steps:**
1. Create task with complexity ‚â•7 points
2. Verify "üîç MANDATORY COMPLEXITY ASSESSMENT" message
3. Confirm automatic scoring
4. Validate expansion recommendation
5. Test bypass blocking
6. Approve expansion, verify sub-tasks created

**Success:** ‚úÖ Auto-assessment, expansion required, sub-tasks generated

#### 2.2: TASK_START Complexity Re-evaluation
**Scenario:** Start task with scope growth
**Expected:** Re-evaluation before execution

**Steps:**
1. Start task with potential complexity increase
2. Verify "‚ö° MANDATORY PRE-EXECUTION COMPLEXITY CHECK"
3. Confirm comparison with original
4. Test mandatory expansion if score >7

**Success:** ‚úÖ Re-evaluation occurs, expansion enforced if needed

### 3. Tool Awareness Tests

#### 3.1: TASK_START Tool Consultation
**Scenario:** Start task with available MCP tools
**Expected:** Tool consultation mandatory

**Steps:**
1. Start task with MCP tool alternatives
2. Verify "üîß MANDATORY MCP TOOL CONSULTATION" message
3. Confirm MCP_TOOLS_INVENTORY.md referenced
4. Validate contextual suggestions
5. Test manual approach blocking
6. Approve tool usage, verify proceed

**Success:** ‚úÖ Auto-consultation, suggestions provided, manual blocked

#### 3.2: TASK_EXECUTION Anti-Pattern Detection
**Scenario:** Manual approach with tools available
**Expected:** Anti-pattern detection triggers

**Steps:**
1. Begin execution with tool alternatives
2. Suggest manual approach
3. Verify "üö® MANUAL APPROACH DETECTED" message
4. Confirm tool alternatives presented
5. Test manual approach blocking
6. Accept tool alternative

**Success:** ‚úÖ Detection triggers, alternatives shown, manual blocked

### 4. Bypass Prevention Tests

#### 4.1: Emergency Override
**Test:** Emergency override scenarios
**Expected:** Override works with justification

**Steps:**
1. Trigger rule in emergency
2. Select override option
3. Verify detailed justification required
4. Confirm override logged

#### 4.2: Bypass Prevention
**Test:** Circumvent mandatory activations
**Expected:** All bypass attempts blocked

**Steps:**
1. Attempt skip memory consultation
2. Try bypass complexity assessment
3. Attempt manual without tool evaluation
4. Verify all blocked with proper error messages

### 5. Effectiveness Tracking Tests

#### 5.1: Activation Logging
**Test:** Rule activations properly logged
**Expected:** Complete metrics captured

**Validation:** Logs contain timestamp, rule_name, trigger_point, activation_level, user_response, recommendations_provided, actions_taken, bypass_attempted, effectiveness_score

#### 5.2: Cross-Rule Communication
**Test:** Rule-to-rule coordination
**Expected:** Rules share context appropriately

**Validation:** Memory findings influence expansion, tool recommendations consider complexity, coordination logged

### 6. Workflow Integration Tests

#### 6.1: Complete Task Creation
**Flow:** User Request ‚Üí Memory Check ‚Üí Complexity Assessment ‚Üí Tool Presentation ‚Üí Confirmations ‚Üí Task Created

**Validation:** Each trigger activates correctly, confirmations required, all logged, creation succeeds

#### 6.2: Task Execution
**Flow:** Status InProgress ‚Üí Tool Presentation ‚Üí Complexity Re-assessment ‚Üí Anti-pattern Monitoring ‚Üí Evidence Verification

**Validation:** Real-time activation, continuous monitoring, completion verification

#### 6.3: Task Completion
**Flow:** Completion Attempt ‚Üí Evidence Verification ‚Üí Archival Check ‚Üí Task Complete

**Validation:** Comprehensive verification, archival threshold check

## Test Framework

### Test Runner
```python
class RuleActivationTestRunner:
    def __init__(self):
        self.test_results = []
        self.failed_tests = []
    
    def run_memory_tests(self): pass
    def run_expand_tests(self): pass  
    def run_tool_tests(self): pass
    def run_integration_tests(self): pass
    def generate_test_report(self): pass
```

### Test Data
```yaml
test_scenarios:
  memory: [{similar_tasks_exist: true, expected_trigger: true, matches: 3}]
  complexity: [{task_complexity: 8, expected_expansion: true, subtasks: 3}]
  tools: [{task_type: "web_testing", tools: ["browser_navigate"], suggestions: 2}]
```

### Success Metrics
- **Rule Activation**: 100% eligible triggers activate
- **Bypass Prevention**: 100% bypass attempts blocked
- **Confirmations**: 100% required confirmations enforced
- **Logging**: 100% activations logged correctly
- **Integration**: 100% seamless workflow operation

### Test Report
```markdown
# Rule Activation Test Report
## Summary: Total: X, Passed: X, Failed: X, Rate: X%
## Results:
- Memory Rules: ‚úÖ/‚ùå
- Expand Rules: ‚úÖ/‚ùå  
- Tool Awareness: ‚úÖ/‚ùå
## Failed Tests: [Details and remediation]
```

## Test Checklist
### Setup
- [ ] Rule files in place
- [ ] Test data prepared
- [ ] Test runner ready

### Execution
- [ ] Memory rule triggers tested
- [ ] Expand rule triggers tested
- [ ] Tool awareness triggers tested
- [ ] Cross-rule integration tested
- [ ] Bypass prevention validated
- [ ] Override mechanisms tested

---
**Status:** ‚úÖ Framework designed, all test categories defined, validation criteria established
