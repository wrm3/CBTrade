---
description: 
globs: 
alwaysApply: true
---
# Tool Awareness & MCP Integration Rule

Whenever you use this rule, start your message with the following:

"Checking available MCP tools..."

This rule ensures AI agents consistently utilize available MCP tools during task execution, provides intelligent task-tool mapping, and implements comprehensive anti-pattern prevention.

## Core Principle

**TOOL-FIRST APPROACH**: Before implementing any solution manually, AI agents MUST first consult available MCP tools and explicitly consider tool-based approaches.

## Always Available Tools

### fstrent_mcp_tasks Server Tools
These tools are always available when fstrent_mcp_tasks is deployed:
- **`fstrent_tasks_v2_setup`** - Initialize fstrent_tasks_v2 system in target project
- **`get_datetime`** - Reliable timestamp functionality for task updates
- **`silicon_valley_setup`** - Deploy Silicon Valley development environment

## MCP Tool Discovery & Inventory

### Tool Inventory Creation
When starting work on any project, create or update `MCP_TOOLS_INVENTORY.md` in `.fstrent_tasks_v2/`:

```markdown
# MCP Tools Inventory

## Always Available Tools
### fstrent_mcp_tasks Server
- `fstrent_tasks_v2_setup` - Initialize task management system
- `get_datetime` - Timestamp functionality for tasks
- `silicon_valley_setup` - Development environment setup

## Environment-Specific Tool Categories

### [Category Name Based on Available Tools]
- `tool_name` - Brief description of capabilities

### Quick Reference Mappings
- **Web Development**: [list actual browser/web tools]
- **Database Tasks**: [list actual database tools]  
- **Research**: [list actual web search/scraping tools]
- **Desktop/System**: [list actual automation tools]
- **Code Execution**: [list actual Python/script tools]

## Task Type → Tool Workflows
[Define specific workflows based on available tools]
```

## Task-Tool Mapping Framework

### Dynamic Mapping Methodology
The task-tool mapping system provides AI agents with methodology for:
1. **Discovering available MCP tools** in the target project environment
2. **Categorizing tools** by capabilities and use cases
3. **Creating dynamic mappings** between task patterns and available tool categories
4. **Building context-aware workflows** based on specific tool ecosystem
5. **Preventing anti-patterns** specific to available toolset

### Tool Categorization Framework

#### Web/Browser Interaction Tools
*Navigation, clicking, form filling, content extraction, JavaScript execution*
- Use for frontend testing, user flow validation, visual verification
- **Common Tools**: `browser_navigate`, `browser_screenshot`, `browser_extract_text`, `browser_click`, `browser_type`

#### Database/Data Access Tools  
*Read queries, write operations, schema management, data analysis*
- Use for data verification, backend testing, system state checks
- **Common Tools**: `mysql_query_sql`, `mysql_execute_updating_sql`, `oracle_query`, `oracle_execute`

#### Research/Information Gathering Tools
*Web search, content scraping, API calls, data aggregation*
- Use for market research, technology evaluation, requirement gathering
- **Common Tools**: `web_search`, `web_scrape_url`, `web_scrape_urls`

#### Screen/Visual Tools
*Screenshots, image analysis, visual automation, display capture*
- Use for state documentation, error capture, visual proof
- **Common Tools**: `screenshot_url`, `screenshot_local`, `browser_screenshot`

#### Code/System Execution Tools
*Code execution, system commands, process management, file operations*
- Use for automation, data processing, system administration
- **Common Tools**: `python_execute`, `computer_use`

#### Project Setup & Configuration Tools
*Environment configuration, template deployment, system initialization*
- Use for new project setup, configuration management
- **Common Tools**: `fstrent_tasks_v2_setup`, `silicon_valley_setup`

## Activation Points & Integration

### TASK_START (MANDATORY)
**When:** Task status changes to inprogress  
**Required Actions:**
1. Reference `MCP_TOOLS_INVENTORY.md`
2. Identify relevant tool categories for task type
3. Present tool-based approach before manual alternatives
4. Document tool selection rationale
5. Present contextual tool suggestions
6. Require user confirmation for approach

### TASK_EXECUTION (CONTINUOUS)
**When:** During active work - anti-pattern detection  
**Actions:**
1. Detect manual approaches when tools are available
2. Suggest tool alternatives immediately
3. Require justification for bypassing available tools
4. Block manual approaches until tool evaluation

### PRE_COMPLETION (MANDATORY)  
**When:** Before marking task complete  
**Actions:**
1. Use verification tools appropriate to task type
2. Capture tool-based evidence of completion
3. Document tool outputs as completion proof
4. Require verification before completion

## Task Pattern → Tool Mapping

### Web Development Tasks
**Primary Tools:** Browser automation, screenshot capture, JavaScript execution
**Workflow Pattern:**
1. `browser_navigate` → Navigate to target application
2. `browser_extract_text` → Capture current state
3. `browser_screenshot` → Visual documentation
4. Database tools → Verify backend state if applicable

**Specific Patterns:**
- **Frontend Testing:** [Web Tools] → [Visual Tools] → [Code Tools]
- **Form Validation:** [Web Tools] for input/submission/validation
- **User Flow Testing:** [Web Tools] for navigation sequences

### Database Operations
**Primary Tools:** SQL query tools, database execution tools
**Workflow Pattern:**
1. `query_sql` → Read current state (read-only first)
2. `execute_updating_sql` → Make changes if needed
3. `query_sql` → Verify changes applied correctly

**Specific Patterns:**
- **Schema Validation:** [Database Read] → [Database Write] if needed
- **Data Migration:** [Read backup] → [Write migration] → [Read verification]

### Research and Analysis
**Primary Tools:** Web search, content scraping, code execution
**Workflow Pattern:**
1. `web_search` → Find relevant information
2. `web_scrape_url` → Extract detailed content
3. `python_execute` → Process and analyze data

**Specific Patterns:**
- **Market Research:** [Search] → [Extract] → [Code analysis]
- **Content Analysis:** [Bulk collection] → [Code processing]

### System Administration
**Primary Tools:** Screenshot tools, computer automation, script execution
**Workflow Pattern:**
1. `screenshot_local` → Document current state
2. `computer_use` → Automate GUI interactions if needed
3. `python_execute` → Run system commands/scripts

## Common Workflow Patterns

### Web Testing Full Stack Pattern
```
[Database Read] → [Web Interaction] → [Visual Tools] → [Database Read verification]
```

### Database Migration Safe Pattern
```
[Database Read backup] → [Database Write migration] → [Database Read verification]
```

### Research to Implementation Pattern
```
[Research Tools] → [Code Execution analysis] → [Web Tools verification] → [Visual documentation]
```

## Anti-Pattern Prevention

### Common Anti-Patterns → Tool Solutions

**❌ "I'll describe the expected behavior"**
→ ✅ Use `browser_screenshot` or `screenshot_local` to show actual state

**❌ "I'll check through the application manually"**
→ ✅ Use database query tools to verify data directly

**❌ "I assume this works correctly"**
→ ✅ Use appropriate testing/verification tools

**❌ "I'll manually test the functionality"**
→ ✅ Use browser automation or GUI automation tools

**❌ "I'll look this up later"**
→ ✅ Use `web_search` tools immediately

**❌ Manual Approach When Automation Available**
**Problem:** Manual description/testing when automation tools exist
**Solution:** Use [Relevant Tool Category] to automate
**Detection:** Manual approach suggested when tools available

**❌ Indirect Access When Direct Access Available**  
**Problem:** Using application-layer tools when direct system access exists
**Solution:** Use [Direct Access Tools] first, verify with [Application Layer Tools]

**❌ Text Description When Visual Proof Available**
**Problem:** Describing visual elements instead of capturing them
**Solution:** Always use [Visual Tools] for visual verification

## Bypass Conditions & Framework

Tool-first approach can only be bypassed with explicit justification:

### Bypass Justification Framework

```markdown
## MCP Tool Analysis: [Task Title]

**Available Tools:** [list relevant tools]
**Recommended Approach:** [tool-based workflow]

**User Decision:**
☐ Use recommended tool approach
☐ Tools insufficient (explain why: ________________)
☐ Manual approach justified (reason: ________________)
☐ Emergency/time-critical bypass (explain: ________________)
```

### Valid Bypass Conditions
- ☐ MCP tools unavailable/failed
- ☐ Tool functionality insufficient  
- ☐ Educational/learning purpose
- ☐ Emergency production issue

## Implementation Guidelines

### Priority Order for Tool Selection
1. **Safety First** - Use read-only tools before write operations
2. **Single Operation** - Use simple tools for straightforward tasks
3. **Verification Tools** - Always capture evidence of results
4. **Documentation** - Record tool decisions and outputs

### Integration with fstrent_tasks_v2 Workflow

**Task Creation:**
- Include tool recommendations in task description
- Identify primary and supporting tools needed

**Task Planning Phase:**
1. Reference `MCP_TOOLS_INVENTORY.md`
2. Identify relevant tool categories for task type
3. Present tool-based approach before manual alternatives
4. Document tool selection rationale

**Task Execution:**
- Lead with tool-based approach
- Document tool usage and results
- Use tools for verification before completion
- Continuous monitoring for anti-patterns

**Task Completion:**
- Require tool-based evidence
- Archive tool outputs in task documentation

## Tool Selection Decision Trees

### Decision Framework Template
```
Decision question?
├── Condition A → Recommended action
└── Condition B → Alternative action
```

### Task Complexity Assessment
```
Is task simple single-operation?
├── Yes → Use single appropriate tool
└── No → Use workflow pattern with multiple tools
```

### Safety Assessment
```
Does task modify data/state?
├── Yes → Use read-only verification first, then write operation
└── No → Proceed with read-only tools
```

---

**Integration:** This rule works with all fstrent_tasks_v2 rules - tool considerations are mandatory during task planning, execution, and completion. Tool awareness ensures MCP tools are leveraged optimally while maintaining override mechanisms for legitimate edge cases and comprehensive workflow guidance.







