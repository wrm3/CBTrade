---
description: 
globs: 
alwaysApply: true
---
# PowerShell Command Reference for Windows Development
- You have less problems reading the results from the terminal when they are run in the background.

## CRITICAL: Terminal Integration Self-Diagnosis

### � AI Self-Check: Am I Reading PowerShell Results Correctly?

**MANDATORY CHECK before any PowerShell operation:**

#### Symptoms of Terminal Integration Failure:
- ❌ Waiting indefinitely for command results that already appeared
- ❌ Treating error messages as successful outputs  
- ❌ Missing command output entirely
- ❌ Cursor position errors in terminal
- ❌ PSReadLine integration problems

#### Self-Diagnostic Questions:
1. **Did I see actual command output?** If not, terminal integration may be broken
2. **Am I treating errors as success?** Check if output contains error keywords
3. **Am I waiting for results that already came?** Look for completed command patterns
4. **Is the terminal showing cursor position errors?** This indicates integration failure

#### Emergency Fallback Methods:
```powershell
# Method 1: Explicit output capture and display
$result = python -c "print('test')" 2>&1
Write-Host "RESULT: $result"

# Method 2: Output to file for verification
python -c "print('test')" > temp_output.txt 2>&1
Get-Content temp_output.txt

# Method 3: Use explicit error handling
try {
    $output = python -c "print('test')" 2>&1
    Write-Host "SUCCESS: $output"
} catch {
    Write-Host "ERROR: $($_.Exception.Message)"
}

# Method 4: Force UTF-8 encoding
$OutputEncoding = [Console]::OutputEncoding = [Text.Encoding]::UTF8
python -c "print('test')"
```

### Self-Fixing Protocol:

#### Step 1: Detect Integration Failure
```powershell
# Test command to verify terminal integration
Write-Host "TERMINAL_TEST_START"
python -c "print('TERMINAL_TEST_SUCCESS')"
Write-Host "TERMINAL_TEST_END"
```

#### Step 2: Apply Immediate Workarounds
```powershell
# Set proper encoding
$OutputEncoding = [Console]::OutputEncoding = [Text.Encoding]::UTF8

# Use explicit output capture
function Invoke-SafePythonCommand {
    param([string]$Command)
    try {
        $result = python -c $Command 2>&1
        Write-Host "PYTHON_OUTPUT: $result"
        return $result
    } catch {
        Write-Host "PYTHON_ERROR: $($_.Exception.Message)"
        return $null
    }
}
```

#### Step 3: Alternative Command Strategies
When terminal integration fails, use these patterns:

```powershell
# Instead of direct commands, use wrapped versions:

# OLD (integration-dependent):
python script.py

# NEW (integration-safe):
$result = python script.py 2>&1
Write-Host "EXECUTION_RESULT: $result"

# For file operations:
python script.py > output.log 2>&1
Write-Host "Command completed. Output:"
Get-Content output.log
```

## Powershell on Windows 10/11
- You are running powershell on windows 10/11, ensure that your commands and powershell usage is adjusted accordingly
- You have issues with using curl as its interpretted as a 'Invoke-Webrequest command and you will end up hung up on a prompt waiting for uri:
- && does not work as a command seperator well, you perform better when using ;

## Powershell Date Time
- when using powershell to get the time, use this command first "powershell -Command "(Get-Date).ToUniversalTime().ToString('yyyy-MM-ddTHH:mm:ssZ')"


## Curl/HTTP Request Commands

**CRITICAL:** In PowerShell on Windows, `curl` is an alias for `Invoke-WebRequest` cmdlet, NOT the actual curl executable. This causes interactive prompts that block automation.

### ❌ AVOID - Gets stuck on Uri prompt:
```powershell
curl -s http://localhost:5000/api/status
# This will prompt: "Uri:" and hang
```

### ✅ USE INSTEAD:
```powershell
# Option 1: Use Invoke-WebRequest with proper syntax
Invoke-WebRequest -Uri "http://localhost:5000/api/status" -UseBasicParsing

# Option 2: Use shorthand 'iwr'
iwr "http://localhost:5000/api/status" -UseBasicParsing

# Option 3: Force actual curl executable
curl.exe -s http://localhost:5000/api/status

# Option 4: For JSON responses
(Invoke-WebRequest -Uri "http://localhost:5000/api/status").Content | ConvertFrom-Json
```

## Directory Navigation
```powershell
# Change directory and run command in one line
cd flask-vpn-manager; python main.py

# Create multiple directories
New-Item -ItemType Directory -Path "app\templates", "app\static" -Force
```

## Powershell Flask Servers
- You often get hung when running a flask web server in chat... its better if you run it as a background task

## Flask Development
```powershell
# Start Flask in background
python main.py &

# Test endpoints
Invoke-WebRequest -Uri "http://127.0.0.1:5000/" -UseBasicParsing
Invoke-WebRequest -Uri "http://127.0.0.1:5000/api/status" -UseBasicParsing
```

## Recognition Patterns for Failed Commands

### Error Keywords to Watch For:
- "Exception", "Error", "Failed", "Cannot", "Unable"
- "Access denied", "Permission denied", "File not found"
- "Traceback", "SyntaxError", "ImportError"
- "Connection refused", "Timeout", "Network error"

### Success Indicators:
- Actual expected output content
- Exit codes of 0
- Expected file creation/modification
- Proper JSON/data structure responses

### Integration Failure Indicators:
- No output when output is expected
- Cursor remaining in "waiting" state
- Missing error messages for obviously failing commands
- Treating error output as successful completion

## Emergency Procedures

### When Terminal Integration Completely Fails:

1. **Acknowledge the Problem:**
   ```
   "I notice I'm having trouble reading PowerShell output properly. Let me apply the terminal integration fix."
   ```

2. **Use File-Based Output:**
   ```powershell
   # Redirect all output to files
   python script.py > success.log 2> error.log
   
   # Check results
   if (Test-Path success.log) { 
       Write-Host "SUCCESS OUTPUT:"
       Get-Content success.log 
   }
   if (Test-Path error.log) { 
       Write-Host "ERROR OUTPUT:"
       Get-Content error.log 
   }
   ```

3. **Apply Cursor Integration Fix:**
   Reference the shellIntegration.ps1 fixes from the powershell_fix.md document

## CRITICAL: Command Parsing Failures Prevention

### � NEVER USE Multi-Line Python Commands in PowerShell
**PROBLEM**: PowerShell mangles multi-line Python commands causing "q**" and similar parsing errors

### ❌ NEVER DO THIS:
```powershell
python -c "
from some_module import something
# Multi-line code here
result = something()
print(result)
"
```

### ✅ ALWAYS DO THIS INSTEAD:
```powershell
# Method 1: Single line commands only
python -c "from some_module import something; result = something(); print(result)"

# Method 2: Use actual Python files
# Create temp file and execute it
python script_name.py

# Method 3: Use here-strings for complex commands (safer)
$pythonCode = @"
from some_module import something
result = something()
print(result)
"@
$pythonCode | python
```

### Character Encoding Protection
**MANDATORY**: Set encoding before any Python execution:
```powershell
# ALWAYS run this first in any PowerShell session
$OutputEncoding = [Console]::OutputEncoding = [Text.Encoding]::UTF8
[Console]::InputEncoding = [Text.Encoding]::UTF8
```

### PSReadLine Interference Prevention
**PROBLEM**: PSReadLine can interfere with command parsing

### ✅ Safe Command Execution Pattern:
```powershell
# For any potentially problematic command:
cmd /c "python script.py"  # Use cmd.exe as intermediary
# OR
Start-Process python -ArgumentList "script.py" -Wait -NoNewWindow
```

### Command Parsing Error Recovery
**When you see errors like "The term 'q**' is not recognized":**

1. **STOP immediately** - Don't retry the same command
2. **Clear the command buffer**: Press Ctrl+C, then Enter
3. **Reset encoding**: Run the UTF-8 encoding commands above
4. **Use safe execution pattern**: cmd /c or Start-Process
5. **Never use multi-line strings in python -c**

## Common Gotchas
- Use `-UseBasicParsing` to avoid DOM parsing issues
- Always quote URLs with special characters
- Use `curl.exe` if you need actual curl behavior
- PowerShell aliases can override expected behavior
- **CRITICAL**: Always verify you can actually see command results before proceeding
- **CRITICAL**: If waiting more than 10 seconds for simple commands, assume integration failure
- **CRITICAL**: NEVER use multi-line python -c commands - they ALWAYS fail
- **CRITICAL**: Set UTF-8 encoding before ANY Python execution









