-------------------------------------------------
Modifications Log
-------------------------------------------------
-------------------------------------------------

    2024-09-10
        summary: ohlcv tables, mysql stays, increased speed
        Removed all he DuckDb test code.  
        DuckDb is single access read and write... so multiple executing agents could not access the db ie bot & web.
        This was going to impact future plans
        SQLite3 has multiple concurrent reads, which might have been good enough, but decided to stick with MySQL
        Numerous MySql, bot_db_read, bot_db_write changes
        Added ohlcv tables and logic to reduce the api calls for candles
        reduced the bot_ta.mkt_ta_main_new timing from 15'ish seconds to 4-6 seconds. loop of 90 mks from 980 seconds to 720
        removed 3min candles from TA, since they were taking 2 api candle calls to get enough data, might re-add later using resampled 1min
        worked on lib_ai_youtube, which transcribes yt videos... next will be to integrate into a knowledgebase/wiki/RAG (might be seperate project)
        began beaking lib_common into smaller libraries focused on logical groupings

    2024-09-12
        summary: display, more chart work, options to hide some messages
        fixed several chart sides during messaging (mainly sell logic, and sell strat logic)
        strat performance boosting requirements and optional messaging, trade size + max open
        mkt performance boosting requirements and optional message, max open
        added display information for boosted prod_ids and strats 
            open_cnt/max_open in Buy Logic
        fixed position sell header missing after messages were shown in sell by strat logic
        reduced code duplicated in sell tests by creating bot.disp_sell_tests
        reduced code duplicated in sell tests by creating bot_strats.disp_sell_tests
        cleaned up dead code in bot.py
        played around alot with timers, assessing where time can be shaved, minor improvements
        
    2024-09-13
        I have refactored my code from bot.py into bot_cls_buy.py, bot_cls_sell.py, bot_cls_main.py and run_bot.py.  
        This was mainly done to allow reduce the length of the bot.py file to allow the AI to parse it better. 
        I was using o1-mini today in cursor composer, and its a massive improvement.  
        The changes will also set me up to be able to run the buy and sell logic as seperate scripts, 
            and to also dump other loop actions into run_auto.py to make the bot loop faster.  
        I would like to get it done to being able to loop 90 markets in 3 minutes, curently its taking around 10 minutes.
        Glad I found a way to break apart a monolithic class without pylint and other tools going nuts over it.

    2024-09-15
        Continued working on breaking the buy & sell routines into seperate separate flows
        While maintaining the ability to run the original way so that it loops markets, does ta, attempts to buy, evals sells
        The Original Mode is now called Full, its still the default run mode
        Buy Mode only loops markets that come back from the buy markets logic.  
            For me I was looping 95 markets in about 12 minutes.
            The Buy Loop now completes in about 3 minutes after evaluating 45 markets for buying
        Sell Mode only loops markets that have open positions.
            For me I was looping 95 markets in about 12 minutes.
            The Sell Loop now completes in about 3 minutes after evaluating 90 markets for selling multiple positions
                when running 3 bots set to sell
        To run the oringal method, command is still 
            py -3 run_bot.py
        To run buy mode, the command is 
            py -3 run_bot.py b
        To run sell mode, the command is
            py -3 run_bot.py s
        I have placed logic into the sell routine that allows multiple bots to be run in sell mode.
        This will allow you to cycle through your sell positions faster.
        Logic introduced a check to see when a market was updated last, if it changes since the loop started it skips
        So far I have not had any data collisions.
        Still cleaning up the code from this
        I will be adding more logic to speed up Sells
            Most of which will be based on settings... 
                ie if all open positions have current price below buy price and allow sell at loss is not on, skips TA
        I will be adding more logic to speed up Buys
            For example switching to Sell mode if there are no available funds to spend

    2024-09-22
        Ran into many issues with the multiple bots selling functions.
            Changed the client_order_id generation method to GUID, to prevent the time based id generation
                the time based one, was causing the second+ order with the same # to not process
                the selling function could not handle this and it broke many positions in the database
                    double+ sellings of the same positions
                    accounting nightmares that needed to be worked out
                    almost reset the database, but didn't want to lose all the training data
                I have been battling this off and on since the beginning, but it re-emerged while runnning multiple sell bots
            While diagnosing, debugging the selling function... reorganized much code.
                sell functionality is now its own POS class, which took considerable amount of time and accounting to get switched over
        Split Strats file into Buy & Sell files during the POS class
            reduced pass in parameter & return information
            preparation for adding new strats
        Added some new settings
        Modified Read and Write SQLs for mainly related to sell functions
        Modified Website, I think splitting the run_web.py and bot_reports.py library was this changes, but might have been last.

    2024-09-30
        Added gitc.bat to help speed up git commits
        Working on timing messaging, put functionality into new debug_settings
        Add new timings display for mkt_logic
        Added in Nadaraya-Watson Estimator
        Broke bot into multiple classes market, pair, buy, pos.  This was a significant rewrite and retest
        added debug timing settings file
        added markets settings file
        added individual markets settings (usdc, btc, eth et cetera) - this functionality for trading other quote curr still in progress
        attempted to clean up code
        added budget features, spending cap, up & down strat % caps, individual pair caps, individual pair up & down caps
        removed secrets.json file that behaved like settings library
        added in .env functionality to replace secrets.json
        changed multiple displays including adding new budget panel
        further refined running multiple bots on sell -s mode without colliding
        added an -a mode for clearing buy & sell orders, as well as refreshing market data
        modes are now -a = auto, -b buy, -s sell, -f/none = full


-------------------------------------------------
To Do & Dreams list (tackle as they manifest)
-------------------------------------------------
-------------------------------------------------

    -------------------------------------------------
    clean up excess timing narcs
    -------------------------------------------------
    * there are alot of timing narcs still reporting things that are ok..
    * remove them asap

    -------------------------------------------------
    sell mode
    -------------------------------------------------
    * clean up extra commented or dead out code
    * add logic to skip TA & other tests when settings would prevent sell anyways

    -------------------------------------------------
    buy mode
    -------------------------------------------------
    * switch to sell mode temporarily when lacking available funds

    -------------------------------------------------
    auto mode
    -------------------------------------------------
    * perform routine checks outside of the buy/sell routines
        speed boosts
        prevent data collides if multiple bots attempt to update markets or refresh wallet
    * update markets routine should update price on open positions and recalc some fields

    -------------------------------------------------
    remove extra unused library clutter
    -------------------------------------------------
    * remove extra unused library clutter


    -------------------------------------------------
    speak is causing slowness
    -------------------------------------------------
    * fix the speak async or switch to different library


    -------------------------------------------------
    Displays Changes
    -------------------------------------------------
    * make more prominent current investment amount
    * make more prominent current cashout amount
    * make the displays workable with different trading coins /quote currency
        ie dynamically update $ with 
        1. Bitcoin             Symbol: ₿  Unicode: U+20BF
        2. Ethereum            Symbol: Ξ  Unicode: U+039E
        3. Solana              Symbol: ◎  Unicode: U+25CE (Bullseye)
        5. Binance Coin (BNB)  Symbol: Ƀ  Unicode: U+0243 (Latin Capital Letter B with Stroke)
        6. Cardano             Symbol: ₳  Unicode: U+20B3 (Austral Sign)
        7. Ripple (XRP)        Symbol: ✕  Unicode: U+2715 (Multiplication X)


    -------------------------------------------------
    Themes
    -------------------------------------------------
    * Add theme choices to the settings


    -------------------------------------------------
    AutoBot
    -------------------------------------------------
    * add auto.py (an autobot lol) that works on keeping tables updated
    * like the above mkt refresh
    * like keeping candles ohlcv topped off 


    -------------------------------------------------
    Email Notifications & Summaries
    -------------------------------------------------
    * email for buys & sells, and daily summaries and balances
    * settings to send alot of emails or summaries alone, etc...


    -------------------------------------------------
    On Market Refresh
    -------------------------------------------------
    * add market refresh occur more frequently even if we add into autobot
    * add update to price information on open positions and related fields like gain_loss_amt, gain_loss_pct... 
        so that looping can be resorted with diff priorities for nice events
        or alternatively is allow_sell_at_loss is False to skip loop, unless also in buy_mkt


    -------------------------------------------------
    Test Mode shakedown.. make sure that testmode is still capable of being run...
    -------------------------------------------------
    * do this after speed enhancements.. last time of greatly bogged down main loop... 
    * this might be easier after I finish portfolio seperation, since I could keep my live bot running seperate


    -------------------------------------------------
    Backtest mode ---
    -------------------------------------------------
    * Be able to test a new strategy against OHLCV data with current settings and determine how it would have performed
        using the logic of this bot... which of course is very different from backtesting module
    * Need to collect the OHLCV data in a very specific way, to do player piano to avoid the same issues as backtesting.py
    * Need 1 minute interval rows... with the 3min, 5min, 15min, 30min, 1h, 4h, 1d forming data
    * Would this be true beyond the curr forming rows? or could hey just be NA for a non interval row


    -------------------------------------------------
    Other Candle Modes - Right Handed Candles
    -------------------------------------------------
    * Always been curious about this... and have played with it before...
    * what if you didn't form candles in the way they currently are... lets call them left handed candles...
    * left handed candles have fix start points.  
    * So when a new 1h candle starts on the hour, and 5 minutes past the hour, it only represents 5 minutes of price action
    * What happens if you use right handed candles? where the current candle always represents a rolling 60 minute timeframe...
    * they will repaint alot, and everyone hates repainting signals... 
    * but would it actually give you more information?
    * would all the technical indicators need to be rewritten or their settings changed?
    * would there be new insights gained?


    -------------------------------------------------
    Portfolio Specific Coinbase calls, so the the trade bot can be isolated from other holdings
    -------------------------------------------------
    * all api calls
    * portfoilio transfer funds... ie transfer (all/part) gains to external holding area for whatever (reinvest, tax, bills, reserves, next bot etc)
    * new column in database tables


    -------------------------------------------------
    Multiple Trade Coin / Quote Currency options
    -------------------------------------------------
    * have started integrating in different places
    * some notes are in those sections
    * will need distinct settings, perhaps additional file ie USDC_SPOT_settings.json, BTC_Future_settings.json


    -------------------------------------------------
    Reserves Logic & Budgeting...
    -------------------------------------------------
    * make reserve lock/unlock independant of strategy module for drop
    * add options for spending/not spending trade currencies (BTC,ETH,SOL) when available
    * conceptualize better than base reserve amt + daily reserve amt... perhaps % of trading pool
    * with budgets, right now trade size is relatively fixed then boosted... 
        introduce dynamic trade sizing for performance... 
        ie Budget of X size.  
            BTC, ETH & SOL is top performer and gets 5 shares
            OTHER1, OTHER2 consistantly are positive gains, so they get 3 Schares
            NEW1, NEW2 are unknowns and get the lowest shares...
            All shares add up are like 50 shares... divide that into $10000 budget
                so BTC,ETH,SOL max_spend on all open positions would be 10000 / 50 * 5 = $1,000 each
                so OTHER1, OTHERS max_spend on all open positions would be 10000 / 50 * 3 = $600
                so NEW1, NEW2 max_spend on all open positions would be 10000 / 50 * 1 = $200
        or something similiar
    * also with budgets, have a set amount reserved for uptrends and downtrends
        could be dynamic, so less for downtrends in a BULL market and vice versa
        basically would set aside of the budget amounts determined aboved would allocate
            40% for downtrend buys like BB, DOWN
            60% for uptrend buys like BB_BO, IMP_MACD, SHA

    -------------------------------------------------
    Multiple Trade Coins/Quote Currencies
    -------------------------------------------------
    * add the rest of the logic for trading the markets that quote in BTC, ETH, SOL & other etc
    * need to not dip into each others open trades from other currencies
    * need to not dip into each others closed trades pocket and clip amounts, unless allowed settings


    -------------------------------------------------
    TA Failure
    -------------------------------------------------
    * when TA fails, don't just skip, also perform the non - TA sell checks


    -------------------------------------------------
    Time improvement
    -------------------------------------------------
    * As I have with other bots, seperate the buy and sell functions to run independantly.
    * Can easily split, but this would double api calls
    * To reduce API calls, need to have the candlestick data saved to db logic above before integrating






    -------------------------------------------------
    Multi-Threading & Async
    -------------------------------------------------
    * current version runs in single thread, so it can prettily display everything to the screen
    * this is purely cosmentic and significantly slows down exectution and response times to time sensitive financial triggers/actions
    * multi parallell async will need some thought in regards to several factors
        API Calls, need to introduce a last call timer.  And define how much time can elapse in general between calls, and different weights of calls
        DB Read Write Blocking.  I have had issues with this before.  Thought I had MySQL resolved in past, but its happening in the code here.
        Python - 3.13 is suppose to have changes to how this works removing the GIL, and how to properly do this.  Read examples, easy to accidentally
            increase the timings if implemented wrong... keep this for later research ./configure --disable-gil --enable-optimizations


    -------------------------------------------------
    host web & mysql/db on external server, to allow people to watch, perhaps the python componens 
    -------------------------------------------------
    out on server as well, to keep me online...


    -------------------------------------------------
    flask public on local network
    -------------------------------------------------
    * its setup to be but not visible from other machines on lan


    -------------------------------------------------
    Settings modifications
    -------------------------------------------------
    * Breaking the settings into smaller and easier to conceptualize
    * this might be the best way to handle the dynamic settings for strats


    -------------------------------------------------
    re-evaluate trade requirement price > daily 100 or 200 EMA
    -------------------------------------------------
    * and for which trade strategies that is required, probably only some of the up momentums


    -------------------------------------------------
    Add New strategies & Modularity of strategies
    -------------------------------------------------
    * strategy settings needs to be moved to bot_strats from the bo_settngs.py
    * this will allow all strat modifications to be done in bot_strats
    * modifiy bot_strats to simplify how easy to create new strats will be
    * create documnetation for new strats and simple strat demo 
    * remove some of my crazier strats that I can tell already are duds
    * dynamic loading... perhaps a self.buy_strats variable that reads from
        buy_strats.json file, which would include the names of the user created strats to load
        the strats functions would cycle through the self.strats executing the func_names by string
            In Python, you can execute a function from its string name by using the globals() or locals() dictionary, depending on where the function is defined. Here's how you can do it:

            If the function is in the global scope, you can use the globals() function to retrieve it from the global symbol table.
            def my_function():
                print("Function executed!")
            # Function name as a string
            function_name = "my_function"
            # Execute the function
            globals()[function_name]()
            For a function in the local scope:

            If the function is defined within a local scope (e.g., inside another function), use locals() to retrieve it from the local symbol table.
            def outer_function():
                def my_inner_function():
                    print("Inner function executed!")
                # Function name as a string
                function_name = "my_inner_function"
                # Execute the inner function
                locals()[function_name]()
            outer_function()
            Using getattr() for class methods:

            If the function is a method within a class, you can use getattr() to dynamically call it from an object or class.
            class MyClass:
                def my_method(self):
                    print("Method executed!")
            obj = MyClass()
            # Method name as a string
            method_name = "my_method"
            # Execute the method
            getattr(obj, method_name)()

            This approach works for both globally and locally defined functions, as well as class methods. Make sure the string exactly matches the function name and the function is defined or loaded before you attempt to execute it.



    -------------------------------------------------
    Reintegrate Long & Short Futures instead of just Spot
    -------------------------------------------------
    * When I switched to coinbase from previous exchange, I removed wait, long, short, hodl from strategies... (remnants scattered around)
    * This was from not understanding how CB does its futures (they are different and require larger amounts of funds)
    * re-introduce when I can afford the larger positions, and understand it enough from manual trading
    * I think this could really backfire without proper research first... not even sure if I could facsilate paper trading version
        with my current understanding of it here on CB.  It was much easier and had variable leverage (including 1x) on other exchanges













-------------------------------------------------
Handled for now
-------------------------------------------------
-------------------------------------------------


    -------------------------------------------------
    Testout duckdb
    -------------------------------------------------
    * see if performance improvement over mysql (and pandas?)
    * initial test with candles ohlcv saving to reduce the API calls for speed improvement


    -------------------------------------------------
    Database issues
    -------------------------------------------------
    * MySQL works fine, but most users will not want to install and executable and figure out MySQL
    * SQLite or other db that can be used without an install (other than pip) would be highly preffered
        Altho losing MySQL Workbench would be rough, most others don't have good gui for selects and stuff
    * DuckDB has already run into issues since its single user read, single user write... 
        This means it will need to have a seperate library and will not really be able to multi-thread or  
            just be using with multiple scripts... ie auto.py populating it and bot.py or buy.py/sell.py
            all accessing it at the same time...
        I had better luck with multiple scripts accessing with SQLite3. It allows multi-concurrent users for reads
            some support for same with writes.
    * Best to leave as MySQL for now, until a solution manifests
        Perhaps set this all up as a docker image... but then again most people don't get docker
        Docker would be good for the porfolio tho...


    -------------------------------------------------
    candles & ohlcv data db
    -------------------------------------------------
    * reduce api calls, as they are currently taking about 8-10 seconds per trade pair
    * aim to reduce to 1-2 calls per trade_pair
    * possible duckdb interation
    * will need to check db for last update of (1min, 3min, 5min, 15min, 30min, 1h, 4h, 1d)
    and compare latest time period, then use shorter periods to update forming candle
    and only update the larger calls like 15min, 30min, 1h, 4h, 1d when once past.
    this of course will be more complex, none... seperate field for calculated row vs 
    from api row indicator etc... last actual api update, vs calculated

    -------------------------------------------------
    Displays Changes
    -------------------------------------------------
    * add max pos cnt to the various displays
